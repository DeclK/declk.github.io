<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>猫头鹰先生催眠录音文本</title>
      <link href="/archives/11812369.html"/>
      <url>/archives/11812369.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV16f4y1S72h">bilibili link</a></p><p>my name is Mr. Owl</p><p>I will shortly lead you through a guided hypnosis</p><p>please don’t listen to this while driving or operating machinery</p><p>you may also want to have a glass of water nearby</p><p>it can help ground you after a recession</p><p>I would like you to start by simply lying down in a comfortable position </p><p>perhaps on some cushions</p><p>or on a couch</p><p>and just take a few moments to relax your mind</p><p>(a moment …)</p><p>in a moment</p><p>I’m going to ask you to imagine a place</p><p>a special place</p><p>you may see it</p><p>feel it</p><p>imagine it or experience it</p><p>in any way you want</p><p>and you might find your mind wondering quite a bit</p><p>but that doesn’t matter to you</p><p>the sound of my voice will continue to relax you</p><p>and it doesn’t matter if you don’t hear a word I say</p><p>because very soon now</p><p>you are going to be relaxed</p><p>more than you have ever known</p><p>imagine now that you are in that place</p><p>that place you know well</p><p>a hotel by a lake</p><p>and you are here </p><p>at the top of a gorgeous staircase</p><p>in a large open hallway</p><p>a really beautiful old hotel</p><p>it’s such a comfortable temperature here</p><p>daylight streams in through the window</p><p>slightly warm</p><p>such a peaceful place to be</p><p>and at the bottom of those stairs</p><p>an open doorway</p><p>leading to a garden</p><p>in a few moments</p><p>I will count</p><p>from 1 to 10</p><p>and count you down each step</p><p>let each number</p><p>represent a step</p><p>and each step takes you deeper and deeper</p><p>into relaxation</p><p>so that by the time I get to ten</p><p>you can allow yourself</p><p>to be as deeply relaxed</p><p>as you ever can be</p><p>and you’ll still hear</p><p>the sound of my voice</p><p>and as you look down</p><p>you can glimpse</p><p>through the open door</p><p>that intriguing garden</p><p>it’s so interesting to you</p><p>to explore and discover</p><p>this special place</p><p>the sunlight to the windows on your skin</p><p>there’s no one around</p><p>that needs anything from you</p><p>no one around</p><p>to bother you</p><p>1</p><p>when you are ready</p><p>take your first step now</p><p>relaxing letting go</p><p>2</p><p>take another step</p><p>feeling more at ease</p><p>and at peace with yourself</p><p>3</p><p>perhaps noticing</p><p>heavy</p><p>restful feeling</p><p>spreading down your legs</p><p>with every step</p><p>4</p><p>just drifting deeper</p><p>and deeper down</p><p>5</p><p>another step</p><p>becoming calmer</p><p>and even calmer still</p><p>continuing to relax</p><p>continuing to let go</p><p>and feeling so good</p><p>6</p><p>perhaps beginning to notice</p><p>any sounds becoming part of your experience of comfort</p><p>relaxation</p><p>and anything you notice</p><p>becoming part of your experience</p><p>7</p><p>sinking deeper and deeper</p><p>drifting</p><p>further</p><p>into this welcoming</p><p>relaxed state</p><p>8</p><p>enjoying those feelings</p><p>half awake</p><p>half asleep</p><p>9</p><p>noticing way of growing relaxation</p><p>and spreading comfort</p><p>10</p><p>an now</p><p>at the bottom of the stairs</p><p>and wandering through that open door</p><p>how into the gardon beyond</p><p>soak up those feelings of</p><p>tranquility</p><p>see</p><p>hear</p><p>feel sense or imagine this</p><p>beautiful garden</p><p>the greens</p><p>the flowers</p><p>the trees</p><p>the brown</p><p>the clear blue sky</p><p>feel the warmth of the sun</p><p>on your head and shoulders</p><p>enjoy a moment here</p><p>and peace</p><p>inhale the sense of the garden</p><p>there is no one around</p><p>wanting anything from you</p><p>needing anything from you</p><p>no one expecting anything</p><p>so enjoy this</p><p>peace</p><p>and quiet</p><p>for a few moments more</p><p>notice now</p><p>at the end of this garden</p><p>a set of steps</p><p>leading down to a sturdy pier</p><p>at the edge of lake</p><p>so now</p><p>take the steps now</p><p>sinking further and further into relaxation</p><p>as you do</p><p>more and more relaxed with each step</p><p>until you step onto the wooden pier</p><p>then stepping forward</p><p>towards that beautiful crystal blue water</p><p>the sun on your skin</p><p>and gentle breeze</p><p>and here</p><p>at the end of the pier</p><p>a fishing rod</p><p>You take it in your hand</p><p>feel a comforting weight of it</p><p>not too heavy to hold</p><p>but you know that it’s strong and sturdy</p><p>it will not struggle with the weight of today’s catch</p><p>slowly and deliberately</p><p>you unravel some of the line</p><p>you pull back the rod</p><p>and cast that line into that crystal</p><p>clear</p><p>blue water</p><p>it sits in that water for a moment</p><p>and soon you feel a gentle pull on the fishing rod</p><p>you’ve caught something</p><p>you gently crank back the handle</p><p>pulling your catch out of the water</p><p>what have you caught</p><p>it’s a white cube</p><p>so square and perfect on every side</p><p>a little water drips from it</p><p>as you gently swing it back onto the pier beside you</p><p>you lower the fishing rod to your side</p><p>and you take</p><p>the white cube from the line</p><p>what’s inside this cube</p><p>it’s a memory</p><p>a good memory</p><p>a memory from your life</p><p>a memory of a time when you were happy</p><p>and strong</p><p>and confident</p><p>you pick up the cube</p><p>you hold it close to your face</p><p>and now you can see this memory</p><p>you see it in a vivid wide screen</p><p>The colors are rich</p><p>the image is bright</p><p>the sound is clear and strong and vibrant</p><p>so strong and vibrant that you step into this memory</p><p>you are inside</p><p>let those feelings grow inside you</p><p>feeling happy and strong and confident and bright</p><p>take a moment to enjoy this</p><p>to live in it</p><p>to breathe</p><p>this beautiful positive memory from the white cube</p><p>feeling strong and confident</p><p>and bright and happy</p><p>now</p><p>slowly</p><p>and with care</p><p>you move out of the memory</p><p>and you lower the cube</p><p>from in front of your face</p><p>and se t it down gently on the pier beside you</p><p>take a moment now</p><p>look out</p><p>onto the lake</p><p>at the cool blue water</p><p>the peace</p><p>tranquility of it</p><p>you kneel down and lower the white cube</p><p>into the peaceful water</p><p>and as the ripples slow and stop</p><p>you catch sight of your own reflection</p><p>and you see how beautiful you are</p><p>how strong you are</p><p>you can see positivity in your eye</p><p>like jewels</p><p>you stand and look out at that lake</p><p>calm serene and full of power</p><p>breathe it in gently</p><p>and then breathe it out gently</p><p>all that power that’s within you</p><p>I let you enjoy those feelings for a few moments more</p><p>allow you time to bask in that life</p><p>but soon</p><p>soon I’ll start count from one up to five</p><p>when I reach five</p><p>you will be back in the room</p><p>1</p><p>starting to come back</p><p>become aware of your breathing</p><p>your body and the space around you</p><p>2</p><p>moving your legs start to wiggle your toes and feet</p><p>a lovely grounding energy, traveling up your legs</p><p>3</p><p>moving your arms starting to stretch, feel the energy moving through your body again</p><p>4 </p><p>your eyes starting to open</p><p>And on the next count your eyes fully open </p><p>5</p><p>eyes fully open, feeling refreshed and recharged and being fully aware of being in the space</p><p>welcome back</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 催眠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校友访谈(纪录片)培训</title>
      <link href="/archives/c8ed5799.html"/>
      <url>/archives/c8ed5799.html</url>
      
        <content type="html"><![CDATA[<h1 id="校友访谈-纪录片-培训"><a href="#校友访谈-纪录片-培训" class="headerlink" title="校友访谈(纪录片)培训"></a>校友访谈(纪录片)培训</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li><p>认识纪录片和口述史</p><p>什么是真实，什么是好的纪录片</p></li><li><p>没有绝对的真实，让故事有逻辑，人物有发展，让观众感到真实，是一个好的纪录片的条件</p></li></ol><h2 id="前期调研"><a href="#前期调研" class="headerlink" title="前期调研"></a>前期调研</h2><ol><li>个人维度：生平，行业信息，突出成就，家庭情况</li><li>历史维度：经历过哪些重大的历史事件，与其他人物在历史上的交集</li><li>事件叙述：起因，过程，结果，历史意义</li><li>最终形成一个人物小传</li></ol><h3 id="案例分享《南大创业者的时代脉搏》"><a href="#案例分享《南大创业者的时代脉搏》" class="headerlink" title="案例分享《南大创业者的时代脉搏》"></a>案例分享《南大创业者的时代脉搏》</h3><h2 id="故事撰写"><a href="#故事撰写" class="headerlink" title="故事撰写"></a>故事撰写</h2><ol><li>一句话概括你的故事 logline</li><li>故事的介绍与结构，关于影片的故事结构，开头、过程、结尾、重要节点</li><li>人物的塑造需要有成长，有套路，从平凡到不平凡的循环过程</li></ol><h2 id="撰写采访问题"><a href="#撰写采访问题" class="headerlink" title="撰写采访问题"></a>撰写采访问题</h2><ol><li>撰写问题按照时间线的顺序，帮助被采访人回忆</li><li>有必须完成的固定动作：重要历程的回顾，重要时间点的讲述，关于主题的必然联系，所有人都希望被理解、被尊重</li><li><p>固定动作之外的惊喜问题：有一些尖锐深刻的话题，在心里拟定好，在现场找点切入</p></li><li><p>多人物采访时的问题思路：采访者之间的共性、特性问题，以及相应的惊喜问题</p></li></ol><h2 id="确定视觉与文字展现形式"><a href="#确定视觉与文字展现形式" class="headerlink" title="确定视觉与文字展现形式"></a>确定视觉与文字展现形式</h2><ol><li>阐述式：有旁白、有采访</li><li>观察式：观察人物</li><li>参与式：类似于 互动vlog</li><li>扮演式：找演员扮演</li><li>资料式：用资料和人物还原</li><li>动画纪录片</li></ol><p>阐述 + 资料为常见组合</p><h2 id="现场拍摄"><a href="#现场拍摄" class="headerlink" title="现场拍摄"></a>现场拍摄</h2><p>摄像机、三脚架、话筒、灯</p><p>注意事项：</p><ol><li>受访者知晓拍摄内容、用途、签文件</li><li>调整环境，让受访者感到舒适，但同时可能需要牺牲画质</li><li>开始前先聊聊家常，同时调整声音和构图，调整画面水平</li><li>采访时，一定不要打断受访者，始终保持眼神交流，不要使用语气词“嗯，啊”之类的</li><li>随即调整采访的顺序</li></ol><h2 id="跟拍"><a href="#跟拍" class="headerlink" title="跟拍"></a>跟拍</h2><ol><li>镜头稳定</li><li>镜头表现</li><li>素材保管，一定要双备份，甚至三备份！因为素材是很“贵”的，不要用剪切！</li><li>保持“记录感”，让镜头持续开机，有比没有强</li></ol><h2 id="Transcription-amp-paper-cut"><a href="#Transcription-amp-paper-cut" class="headerlink" title="Transcription &amp; paper cut"></a>Transcription &amp; paper cut</h2><ol><li>将视频中的文字对话导出</li><li>完成影片脚本，这个脚本是剪辑的根据与逻辑</li></ol><h2 id="剪辑与后期"><a href="#剪辑与后期" class="headerlink" title="剪辑与后期"></a>剪辑与后期</h2><ol><li>剪辑主要故事线</li><li>增加资料、素材、特效包装</li><li>声音制作、调色</li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 纪录片 </tag>
            
            <tag> 培训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda note</title>
      <link href="/archives/c8895fc.html"/>
      <url>/archives/c8895fc.html</url>
      
        <content type="html"><![CDATA[<h1 id="Conda-Cheat-Sheet"><a href="#Conda-Cheat-Sheet" class="headerlink" title="Conda Cheat Sheet"></a>Conda Cheat Sheet</h1><p>记录一些常用的 conda 命令帮助快速管理环境，整理自官方 <a href="https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf">CONDA CHEAT SHEET</a></p><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><h3 id="conda-info"><a href="#conda-info" class="headerlink" title="conda info"></a>conda info</h3><p>这个命令非常管用，基本上能够看到所有的 conda 配置信息</p><h3 id="conda-install"><a href="#conda-install" class="headerlink" title="conda install"></a>conda install</h3><p><code>conda install PACKAGENAME</code> 下载指定包</p><h3 id="conda-update"><a href="#conda-update" class="headerlink" title="conda update"></a>conda update</h3><p><code>conda update PACKAGENAME</code> 更新指定包 </p><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><h3 id="conda-create-n"><a href="#conda-create-n" class="headerlink" title="conda create -n"></a>conda create -n</h3><p><code>conda create -n py36 python=3.6</code> 创造一个 python 3.6 的环境 py36</p><p>注意：一般都要加上 <code>python=x.x</code> 否则使用的是 base 环境的 python 解释器</p><h3 id="conda-env-list"><a href="#conda-env-list" class="headerlink" title="conda env list"></a>conda env list</h3><p>列出目前有的环境</p><h3 id="conda-env-remove"><a href="#conda-env-remove" class="headerlink" title="conda env remove"></a>conda env remove</h3><p><code>conda env remove -n env_name</code> 移除环境</p><h3 id="conda-activate-deactivate"><a href="#conda-activate-deactivate" class="headerlink" title="conda activate/deactivate"></a>conda activate/deactivate</h3><p><code>conda activate/deactivate env_name</code> 激活/退出环境</p><h2 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h2><h3 id="conda-install-1"><a href="#conda-install-1" class="headerlink" title="conda install"></a>conda install</h3><p><code>conda install PACKAGENAME</code> 下载包</p><p><code>conda install --file requirements.txt</code> 通过 requirements 文件下载包</p><h3 id="conda-remove"><a href="#conda-remove" class="headerlink" title="conda remove"></a>conda remove</h3><p><code>conda remove PACKAGENAME</code> 移除包</p><h3 id="conda-list"><a href="#conda-list" class="headerlink" title="conda list"></a>conda list</h3><p><code>conda list PACKAGENAME</code> 查看环境的某个包，如果不加 PACKAGENAME 则列出所有环境</p><h3 id="conda-clean"><a href="#conda-clean" class="headerlink" title="conda clean"></a>conda clean</h3><p>如果不清理的话，anaconda 还是很吃存储的，会逐渐积累很多下载包</p><p><code>conda clean --all</code>  Remove index cache, lock files, unused cache packages, and tarballs.</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="禁用自动启动-base-环境"><a href="#禁用自动启动-base-环境" class="headerlink" title="禁用自动启动 base 环境"></a>禁用自动启动 base 环境</h3><p>每次打开新的 shell 都会自动进入 base 环境，用下面的命令行禁用</p><p><code>conda config --set auto_activate_base false</code></p><h3 id="镜像源设置"><a href="#镜像源设置" class="headerlink" title="镜像源设置"></a>镜像源设置</h3><p>编辑 <code>~/.condarc</code> 文件，设置镜像源</p><p><a href="https://mirrors.bfsu.edu.cn/help/anaconda/">北外镜像源官方帮助文档</a></p><pre class="line-numbers language-.condarc" data-language=".condarc"><code class="language-.condarc">channels:  - defaultsshow_channel_urls: truedefault_channels:  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/main  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/r  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/msys2custom_channels:  conda-forge: https://mirrors.bfsu.edu.cn/anaconda/cloud  msys2: https://mirrors.bfsu.edu.cn/anaconda/cloud  bioconda: https://mirrors.bfsu.edu.cn/anaconda/cloud  menpo: https://mirrors.bfsu.edu.cn/anaconda/cloud  pytorch: https://mirrors.bfsu.edu.cn/anaconda/cloud  simpleitk: https://mirrors.bfsu.edu.cn/anaconda/cloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> conda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manim 教程</title>
      <link href="/archives/5654e2fe.html"/>
      <url>/archives/5654e2fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="Manim-note"><a href="#Manim-note" class="headerlink" title="Manim note"></a>Manim note</h1><p>官方 <a href="https://github.com/3b1b/manim">github 项目</a></p><blockquote><p>Note, there are two versions of manim. This repository began as a personal project by the author of <a href="https://www.3blue1brown.com/">3Blue1Brown</a> for the purpose of animating those videos, with video-specific code available <a href="https://github.com/3b1b/videos">here</a>. In 2020 a group of developers forked it into what is now the <a href="https://github.com/ManimCommunity/manim/">community edition</a>, with a goal of being more stable, better tested, quicker to respond to community contributions, and all around friendlier to get started with. See <a href="https://docs.manim.community/en/stable/installation/versions.html?highlight=OpenGL#which-version-to-use">this page</a> for more details.</p></blockquote><p>这里提到有两个版本的 manim，推荐使用 community edition，这个版本更稳定，更容易上手，下面是两个参考链接</p><ol><li><p><a href="https://github.com/ManimCommunity/manim/">ManimCE github</a></p></li><li><p><a href="https://www.manim.community/">ManimCE documentation</a></p></li></ol><p>强烈推荐根据官方文档进行学习，因为网上的很多资源都是过时的，包括我这篇笔记也会可能会很快过时。这篇笔记主要记录如何安装 ManimCE，以及其代码逻辑，更多实用的动画方法另外再做整理。</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><h3 id="Install-dependencies"><a href="#Install-dependencies" class="headerlink" title="Install dependencies"></a>Install dependencies</h3><p>官方给出了一个<a href="https://hub.gke2.mybinder.org/user/behackl-725d956-b7bf9b4aef40b78-cns6ckcq/notebooks/basic%20example%20scenes.ipynb"> jupyter notebook</a> 预先装载好了 manim 环境，如果你现在不想安装的话，可以在这个 notebook 里面进行小实验</p><p>ManimCE 需要预先下载两个软件 ffmpeg 和 LaTex。文档中建议使用 Scoop, Chocolatey 等包管理软件来下载 dependencies，但我太懒了，不想再下一个包管理软件，而且我自己的电脑上本来就安装了 LaTex 和 ffmpeg 所以只要确保 ManimCE  能够调用这些 dependencies 即可，具体来说就是让 ffmpeg 和 LaTex 命令加入环境变量</p><p>给两个参考链接：<a href="https://zhuanlan.zhihu.com/p/118362010">ffmpeg 知乎教程</a>  <a href="https://www.bilibili.com/video/BV11h41127FD?from=search&amp;seid=5330798070960440671">LaTex简介 bilibili</a></p><p>最后在命令行窗口输入 <code>ffmpeg -version</code> 和  <code>tex -version</code> 检查看看能否成功运行</p><h3 id="Install-ManimCE"><a href="#Install-ManimCE" class="headerlink" title="Install ManimCE"></a>Install ManimCE</h3><blockquote><p>Manim Community runs on Python 3.7+. If you’d like to just use the library, you can install it from PyPI via pip:</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> manim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为习惯了用 conda，所以我选择在 conda 中创建一个 Manim 环境，然后再 pip install</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">conda create -n manim <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(然而最终却稀里糊涂的安装在了 base 环境)</p><p>使用 <code>conda list manim</code> 检查是否安装成功，通过 <a href="https://docs.manim.community/en/stable/tutorials/quickstart.html">Quickstart</a> 简单运行一个程序，检查整个流程是否能够运行</p><h2 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h2><h3 id="Quickstart"><a href="#Quickstart" class="headerlink" title="Quickstart"></a>Quickstart</h3><p>下面是一段简单的代码，能够实现从矩形到圆形的变换</p><p><img src="/archives/5654e2fe/SquareToCircle_ManimCE_v0.8.0.gif" alt="SquareToCircle_ManimCE_v0.8.0" style="zoom: 25%;"></p><p>代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># scene.py</span><span class="token keyword">from</span> manim <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">SquareToCircle</span><span class="token punctuation">(</span>Scene<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">construct</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        circle <span class="token operator">=</span> Circle<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># create a circle</span>        circle<span class="token punctuation">.</span>set_fill<span class="token punctuation">(</span>PINK<span class="token punctuation">,</span> opacity<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>  <span class="token comment"># set color and transparency</span>        square <span class="token operator">=</span> Square<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># create a square</span>        square<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span>PI <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># rotate a certain amount</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>Create<span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># animate the creation of the square</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>Transform<span class="token punctuation">(</span>square<span class="token punctuation">,</span> circle<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># interpolate the square into the circle</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>FadeOut<span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># fade out animation</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 terminal 中执行文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">manim -pql scene.py SquareToCircle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从上面的代码能够看出 Manim 的一些基本框架，首先要有 class 类别作为场景 Scene，在这个 class 中定义 construct() 函数来实现动画效果，然后通过命令行渲染出动画。文档中提到的 Tip:</p><blockquote><p>Every animation must be contained within the <a href="https://docs.manim.community/en/stable/reference/manim.scene.scene.Scene.html#manim.scene.scene.Scene.construct"><code>construct()</code></a> method of a class that derives from <a href="https://docs.manim.community/en/stable/reference/manim.scene.scene.Scene.html#manim.scene.scene.Scene"><code>Scene</code></a>. Other code, for example auxiliary or mathematical functions, may reside outside the class.</p></blockquote><h3 id="A-deeper-look"><a href="#A-deeper-look" class="headerlink" title="A deeper look"></a>A deeper look</h3><p>主要来分析一下上面的命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">manim -pql scene.py SquareToCircle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文档中解释</p><blockquote><p>First, this command executes manim on the file <code>scene.py</code>, which contains our animation code. Further, this command tells manim exactly which <code>Scene</code> is to be rendered, in this case, it is <code>SquareToCircle</code>. This is necessary because a single scene file may contain more than one scene. Next, the flag -p tells manim to play the scene once it’s rendered, and the -ql flag tells manim to render the scene in low quality.</p></blockquote><p>下面是几个常见的参数：</p><ol><li><code>-ql, -qm, -qh, -qk</code> 分别代表不同分辨率，从低到高，再到4k</li><li><code>-a</code> 渲染所有的 Scene</li><li><code>-i</code> 输出为 gif 格式</li><li><code>-f</code> 渲染完成后打开所在文件夹</li></ol><h3 id="Manim’s-building-blocks"><a href="#Manim’s-building-blocks" class="headerlink" title="Manim’s building blocks"></a>Manim’s building blocks</h3><p>Manim 中有3个重要概念</p><ol><li><strong>mathematical object</strong> (or <strong>mobject</strong> for short)</li><li><strong>animation</strong></li><li><strong>scene</strong>.</li></ol><blockquote><p>As we will see in the following sections, each of these three concepts is implemented in manim as a separate class: the <a href="https://docs.manim.community/en/stable/reference/manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject"><code>Mobject</code></a>, <a href="https://docs.manim.community/en/stable/reference/manim.animation.animation.Animation.html#manim.animation.animation.Animation"><code>Animation</code></a>, and <a href="https://docs.manim.community/en/stable/reference/manim.scene.scene.Scene.html#manim.scene.scene.Scene"><code>Scene</code></a> classes.</p></blockquote><h4 id="Mobject"><a href="#Mobject" class="headerlink" title="Mobject"></a>Mobject</h4><blockquote><p>Any object that can be displayed on the screen is a <code>mobject</code>, even if it is not necessarily <em>mathematical</em> in nature.</p></blockquote><p>通过 scene 类中的方法 add(), remove() 来在场景中加入 mobject</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> manim <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">CreatingMobjects</span><span class="token punctuation">(</span>Scene<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">construct</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        circle <span class="token operator">=</span> Circle<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>circle<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>circle<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于 mobject 属性的调整，是通过调 mobject 类的方法来完成</p><ol><li><p>Placing mobject location. 选择在哪里加入物体</p><p>.shift()  .move_to()  .next_to()  .align_to()</p></li><li><p>Styling mobjects. 对物体进行风格渲染</p><p>.set_stroke()  .set_fill()</p></li><li><p>Mobject on-screen order. 添加入场景的 mobject 是有顺序的，后添加的物体会覆盖到图层的上方</p></li></ol><h4 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h4><blockquote><p>At the heart of manim is animation. Generally, you can add an animation to your scene by calling the <code>play()</code> method.</p></blockquote><p>一般来讲通过 play() 方法来加入动画</p><blockquote><p>Animations are procedures that interpolate between two mobjects.</p></blockquote><p>动画的基本原理可以理解为，使用不同的函数在两个关键帧之间进行插值，然后使用 play() 方法进行播放，比如在 Quickstart 中的动画</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>Create<span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># animate the creation of the square</span>self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>Transform<span class="token punctuation">(</span>square<span class="token punctuation">,</span> circle<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># interpolate the square into the circle</span>self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>FadeOut<span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># fade out animation</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>只要可变的属性，都可以使用动画，通过 <code>Mobject.aminate</code> 实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> manim <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">ApplyMethodExample</span><span class="token punctuation">(</span>Scene<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">construct</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        square <span class="token operator">=</span> Square<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_fill<span class="token punctuation">(</span>RED<span class="token punctuation">,</span> opacity<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>square<span class="token punctuation">)</span>        <span class="token comment"># animate the change of color</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>square<span class="token punctuation">.</span>animate<span class="token punctuation">.</span>set_fill<span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># animate the change of position</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>square<span class="token punctuation">.</span>animate<span class="token punctuation">.</span>shift<span class="token punctuation">(</span>UP<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/archives/5654e2fe/ApplyMethodExample_ManimCE_v0.8.0.gif" alt="ApplyMethodExample_ManimCE_v0.8.0" style="zoom: 25%;"></p><h4 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h4><blockquote><p>The <a href="https://docs.manim.community/en/stable/reference/manim.scene.scene.Scene.html#manim.scene.scene.Scene"><code>Scene</code></a> class is the connective tissue of manim. </p></blockquote><p>所有的 mobject 和 animation 都必须加入到 scene 中才能被展现出来，并且 scene 中必须包含 construct() 方法</p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><blockquote><p>Manim provides an extensive configuration system that allows it to adapt to many different use cases. There are many configuration options that can be configured at different times during the scene rendering process. </p></blockquote><p>在渲染动画的过程中还可以设置更多的参数，比如视频渲染质量的高低 <code>-ql, -qh</code></p><p>能够设置 Configuration 的方法有几种</p><ol><li><p>The ManimConfig class</p><blockquote><p>The most direct way of configuring manim is via the global <code>config</code> object, which is an instance of <a href="https://docs.manim.community/en/stable/reference/manim._config.utils.ManimConfig.html#manim._config.utils.ManimConfig"><code>ManimConfig</code></a>.</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> manim <span class="token keyword">import</span> <span class="token operator">*</span>config<span class="token punctuation">.</span>background_color <span class="token operator">=</span> WHITEconfig<span class="token punctuation">[</span><span class="token string">"background_color"</span><span class="token punctuation">]</span> <span class="token operator">=</span> WHITE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Command-line arguments</p><blockquote><p>The following example specifies the output file name (with the <code>-o</code> flag), renders only the first ten animations (<code>-n</code> flag) with a white background (<code>-c</code> flag), and saves the animation as a .gif instead of as a .mp4 file (<code>-i</code> flag). It uses the default quality and does not try to open the file after it is rendered.</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">manim -o myscene -i -n <span class="token number">0,10</span> -c WHITE <span class="token operator">&lt;</span>file.py<span class="token operator">&gt;</span> SceneName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>The config files</p><blockquote><p>Manim can also be configured using a configuration file. A configuration file is a file ending with the suffix <code>.cfg</code>. To use a configuration file when rendering your scene, you must create a file with name <code>manim.cfg</code> in the same directory as your scene code.</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>CLI<span class="token punctuation">]</span><span class="token comment"># my config file</span>output_file <span class="token operator">=</span> myscenesave_as_gif <span class="token operator">=</span> <span class="token boolean">True</span>background_color <span class="token operator">=</span> WHITE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Using-Text"><a href="#Using-Text" class="headerlink" title="Using Text"></a>Using Text</h3><p>There are two different ways by which you can render <strong>Text</strong> in videos:</p><ol><li>Using Pango (<a href="https://docs.manim.community/en/stable/reference/manim.mobject.svg.text_mobject.html#module-manim.mobject.svg.text_mobject"><code>text_mobject</code></a>)</li><li>Using LaTeX (<a href="https://docs.manim.community/en/stable/reference/manim.mobject.svg.tex_mobject.html#module-manim.mobject.svg.tex_mobject"><code>tex_mobject</code></a>)</li></ol><p>一般如果不用公式的话，直接使用 text_mobject 就可以了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> manim <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span>Scene<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">construct</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                text <span class="token operator">=</span> Text<span class="token punctuation">(</span><span class="token string">'Hello world'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>scale<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/archives/5654e2fe/image-20210729160507790.png" style="zoom:25%;"></p><p>使用 tex_mobject 的话，如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> manim <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">HelloLaTeX</span><span class="token punctuation">(</span>Scene<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">construct</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                tex <span class="token operator">=</span> Tex<span class="token punctuation">(</span><span class="token string">r"\LaTeX"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>scale<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/archives/5654e2fe/image-20210729160532548.png" style="zoom: 33%;"></p><p>注意需要使用 raw string <code>r('...')</code> 因为 Latex 中很多特殊字符需要进行转义</p><p>还有不同的方法都能返回 text_mobject &amp; tex_mobject，比如 MarkupText, MathTex </p><p>这篇笔记就到这里了，还有好多好玩的功能就请自行探索吧 😎</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Manim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Manim </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Faster RCNN note</title>
      <link href="/archives/2ad8fafc.html"/>
      <url>/archives/2ad8fafc.html</url>
      
        <content type="html"><![CDATA[<h1 id="Faster-RCNN-note"><a href="#Faster-RCNN-note" class="headerlink" title="Faster RCNN note"></a>Faster RCNN note</h1><p>本文总结自知乎链接<a href="https://zhuanlan.zhihu.com/p/31426458">https://zhuanlan.zhihu.com/p/31426458</a></p><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p>Faster RCNN其实可以分为4个主要内容：</p><ol><li><p>Conv layers </p><p>Faster RCNN首先使用一组基础的conv+relu+pooling层提取image的feature maps。该feature maps被共享用于后续RPN层和全连接层。</p></li><li><p>Region Proposal Networks</p><p>该层通过softmax判断anchors属于positive或者negative，再利用bounding box regression修正anchors获得精确的proposals。</p></li><li><p>Roi Pooling</p><p>该层收集输入的feature maps和proposals，综合这些信息后提取proposal feature maps，送入后续全连接层判定目标类别。</p></li><li><p>Classification</p><p>利用proposal feature maps计算proposal的类别，同时再次bounding box regression获得检测框最终的精确位置。</p></li></ol><p><img src="/archives/2ad8fafc/image-20210614151135341.png" style="zoom: 67%;"></p><h2 id="Conv-Layers"><a href="#Conv-Layers" class="headerlink" title="Conv Layers"></a>Conv Layers</h2><p>Conv layers部分共有13个conv层，13个relu层，4个pooling层 </p><ol><li>所有的conv层都是：kernel_size=3，pad=1，stride=1</li><li>所有的pooling层都是：kernel_size=2，pad=0，stride=2</li></ol><p>那么，一个MxN大小的矩阵经过Conv layers固定变为(M/16)x(N/16)</p><h2 id="Region-Proposal-Networks"><a href="#Region-Proposal-Networks" class="headerlink" title="Region Proposal Networks"></a>Region Proposal Networks</h2><h3 id="Anchors"><a href="#Anchors" class="headerlink" title="Anchors"></a>Anchors</h3><p>提到RPN网络，就不能不说anchors。所谓anchors，实际上就是一组由程序生成的矩形。直接运行作者demo中的generate_anchors.py可以得到以下输出 (不要被这些数字吓到了，没有具体意义)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">84</span><span class="token punctuation">.</span>  <span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">.</span>   <span class="token number">99</span><span class="token punctuation">.</span>   <span class="token number">55</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">176</span><span class="token punctuation">.</span>  <span class="token operator">-</span><span class="token number">88</span><span class="token punctuation">.</span>  <span class="token number">191</span><span class="token punctuation">.</span>  <span class="token number">103</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">360</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token number">184</span><span class="token punctuation">.</span>  <span class="token number">375</span><span class="token punctuation">.</span>  <span class="token number">199</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">56</span><span class="token punctuation">.</span>  <span class="token operator">-</span><span class="token number">56</span><span class="token punctuation">.</span>   <span class="token number">71</span><span class="token punctuation">.</span>   <span class="token number">71</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">.</span>  <span class="token number">135</span><span class="token punctuation">.</span>  <span class="token number">135</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">248</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token number">248</span><span class="token punctuation">.</span>  <span class="token number">263</span><span class="token punctuation">.</span>  <span class="token number">263</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">36</span><span class="token punctuation">.</span>  <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">.</span>   <span class="token number">51</span><span class="token punctuation">.</span>   <span class="token number">95</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token number">168</span><span class="token punctuation">.</span>   <span class="token number">95</span><span class="token punctuation">.</span>  <span class="token number">183</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">168</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token number">344</span><span class="token punctuation">.</span>  <span class="token number">183</span><span class="token punctuation">.</span>  <span class="token number">359</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每行有4个值，代表了矩形左上角和右下角两个点$(x_1, y_1, x_2, y_2)$ </p><p>一共9个矩形，来组于不同长宽比和不同大小的组合：长宽比有3种，1:1, 1:2, 2:1</p><p><img src="/archives/2ad8fafc/image-20210614152512944.png" style="zoom:50%;"></p><p>那么这9个anchors是做什么的呢？借用Faster RCNN论文中的原图，如图7，遍历Conv layers计算获得的feature maps，为每一个点都配备这9种anchors作为初始的检测框</p><p><img src="/archives/2ad8fafc/v2-c93db71cc8f4f4fd8cfb4ef2e2cef4f4_720w.jpg" style="zoom:80%;"></p><p>简单解释一下上图：</p><ol><li><p>conv feature map中，每一个点都是256-dimensions</p></li><li><p>intermidiate layer为 3x3 卷积，out put dimension为256，得到新的conv feature map</p></li><li><p>在新的conv feature map上，我们对每一个点预先设定的k个anchor做bounding box regression和softmax分类(positive, nagetive两类)，分别对应4k coordinates，2k scores</p><p>换句话说，就是把某一anchor区域中的特征向量拿去做prediction，预测内容为该点的分类和该点/anchor对应的bounding box参数</p></li><li><p>由于anchor数量是巨大的，训练程序会在合适的anchors中<strong>随机</strong>选取128个postive anchors+128个negative anchors进行训练</p></li></ol><h3 id="Bounding-box-regression原理"><a href="#Bounding-box-regression原理" class="headerlink" title="Bounding box regression原理"></a>Bounding box regression原理</h3><p>怎样在anchor的基础上回归得到ground truth标签呢？</p><p>给定anchor $(A_x, A_y, A_w, A_h)$ ，给定ground truth $(G_x, G_y, G_w, G_h)$</p><p>我们只要去预测中心点的位置偏移，以及矩形长宽的缩放即可</p><p>个人觉得这样的回归方法有点麻烦，这样来看CenterNet中的bounding box回归是相当直接的</p><h3 id="Proposal"><a href="#Proposal" class="headerlink" title="Proposal"></a>Proposal</h3><ol><li>生成anchors，得到对应的confidence score &amp; bounding box regression，形成最初的proposal</li><li>对所有anchors，根据positive score进行排序，取前6000个anchor proposals</li><li>去除较小和超出边界的proposal</li><li>NMS</li></ol><h2 id="ROI-Pooling"><a href="#ROI-Pooling" class="headerlink" title="ROI Pooling"></a>ROI Pooling</h2><p>Rol pooling层有2个输入：</p><ol><li>原始feature maps</li><li>RPN输出的proposals</li></ol><p>这一个Pooling操作还要有一个功能，就是需要处理不同大小的proposal (kernel)。经典的pooing操作是使用相同大小的kernel，这里我们要预先对 proposal (region of interest) 进行统一的分割，使得pooling结果是相同的表示(如下图)</p><p><img src="/archives/2ad8fafc/image-20210614164103022.png" style="zoom: 67%;"></p><h2 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h2><p>Classification部分利用已经获得的proposal feature maps，通过full connect层与softmax计算每个proposal具体属于那个类别（如人，车，电视等），输出cls_prob概率向量；同时再次利用bounding box regression获得每个proposal的位置偏移量bbox_pred，用于回归更加精确的目标检测框</p><p><img src="/archives/2ad8fafc/image-20210614164211554.png" style="zoom:80%;"></p><h2 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h2><p>Faster R-CNN的训练，是在已经训练好的model（如VGG，ZF）的基础上继续进行训练，实际训练过程为以下：</p><ol><li>在已经训练好的model(e.g. VGG)，训练RPN</li><li>用步骤1中得到的RPN提出proposal</li><li>用提出的Proposal训练Fast RCNN</li><li>用步骤4中训练好的Fast RCNN继续训练RPN</li><li>重复2</li><li>重复3</li></ol><p>可以看出这是一种类似迭代的过程，但只循环了2次，文章提出更多的循环并不会带来相应的提升</p>]]></content>
      
      
      <categories>
          
          <category> papers </category>
          
      </categories>
      
      
        <tags>
            
            <tag> faster rcnn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vs code 教程</title>
      <link href="/archives/ca50f614.html"/>
      <url>/archives/ca50f614.html</url>
      
        <content type="html"><![CDATA[<h1 id="VS-Code-note"><a href="#VS-Code-note" class="headerlink" title="VS Code note"></a>VS Code note</h1><p>学习视频 <a href="https://www.bilibili.com/video/BV1ty4y1S7mC?p=1">bilibili</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>直接在官网一键下载，宇宙第一开发工具，而且还是免费的<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h3><ol><li><p>vs code 支持更换主题皮肤</p></li><li><p>vs code 支持插件扩展，能够实现多种功能来提高编程效率，如下载不同语言，高亮代码等等</p></li><li><p>通过快捷键 palette 查找文件 Ctrl + P，查找命令 Ctrl + Shift + P</p><p>可以修改一些你常用命令的快捷键，我修改了如下命令：</p><ol><li>Run in python file: Ctrl + enter</li><li>Start debugging: Ctrl + shift +enter</li><li>Close panels: Ctrl + Alt + P</li></ol></li><li><p>设置面板快捷键 Ctrl + ,</p></li><li><p>新建一个文件 Ctrl + N</p></li></ol><h2 id="交互式演练场-Interactive-Playground"><a href="#交互式演练场-Interactive-Playground" class="headerlink" title="交互式演练场 Interactive Playground"></a>交互式演练场 Interactive Playground</h2><p>一些编辑的小技巧</p><ol><li><p>同时选中同名字段 Ctrl + Shift + L，但这个功能没有 Refactoring 智能</p></li><li><p>IntelliSense 自动补全 api 功能 Ctrl + space</p></li><li><p>行操作</p><ol><li>复制行，在没有任何东西选中的时候直接 Ctrl + C</li><li>上下移动行，Alt + 上下键</li><li>删除行 Ctrl + Shift + K</li></ol></li><li><p>Formatting 规范代码，需要自己定义 format</p></li></ol><h2 id="一些推荐的设置"><a href="#一些推荐的设置" class="headerlink" title="一些推荐的设置"></a>一些推荐的设置</h2><p>打开 settings</p><ol><li>在熟悉之后关闭 welcome/startup 界面</li><li>建议使用英文界面</li><li>设置字体 JetBrains Mono，还可以顺便设置一下字号。安装字体<a href="https://blog.csdn.net/HUSTHY/article/details/104023077">教程</a></li><li>设置是否显示缩略图 minimap</li><li>设置 restore windows 是否直接恢复上一次的项目</li><li>设置开启 Trims final newlines 自动消除文件末尾多余的空行</li></ol><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>下载 Python 插件</p><h3 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h3><ol><li><p>在底部的 status bar 添加 python 解释器，也可以使用 palette 来添加 interpreter。会自动检测到电脑上的 python interpreter (包括 anaconda 中创建的环境)</p></li><li><p>建立 debug 环境 craete a launch.json file，直接使用默认值就好，详细说明在 <a href="https://zhuanlan.zhihu.com/p/142642410">知乎链接</a></p><p>补充：默认配置只 debug 当前 folder 下的代码（“自己”的代码），如果是 pip/conda install 安装的代码（“别人”的代码），是不会进行 debug 的。如果想要 debug 所有代码则配置文件需要加上 <code>"justMyCode": false</code> <a href="https://blog.csdn.net/g534441921/article/details/102743393">CSDN 参考链接</a></p></li><li><p>Jupyter notebook 是插件里自带的功能，直接打开 ipynb 文件就可以运行代码块，通过选择 notebook 中的 kernel (具体一点说就是选择 conda 中的环境) 就能在你想要的环境中运行了，总体来讲还是比较方便</p></li></ol><h3 id="连接到远程服务器"><a href="#连接到远程服务器" class="headerlink" title="连接到远程服务器"></a>连接到远程服务器</h3><p>由于要跑一些模型，自己的电脑显卡根本跑不动，那就<del>白嫖</del>连接到实验室的服务器​</p><p>通过 vscode Extensions: <code>Remote-SSH</code> 完成，<a href="https://zhuanlan.zhihu.com/p/141205262">知乎教程</a></p><p>在 Remote Expolorer -&gt; SSH TARGETS -&gt; config 中添加配置</p><pre class="line-numbers language-config" data-language="config"><code class="language-config"># Read more about SSH config files: https://linux.die.net/man/5/ssh_configHost random_name    HostName host_ip    User user_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>遇到了报错 <code>Resolver error: Error: Running the contributed command: '_workbench.downloadResource' failed.</code> 无法连接到服务器。原因可能在于服务器是在内网，没有办法在服务器上自动下载好 vscode-server，于是只能本地下载，然后上传</p><p>参考 <a href="https://blog.csdn.net/ibless/article/details/118610776">CSDN 链接</a> 解决问题</p>]]></content>
      
      
      <categories>
          
          <category> 软件基础 </category>
          
          <category> vs code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> vs code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CenterPoint 复现笔记</title>
      <link href="/archives/ba7995ee.html"/>
      <url>/archives/ba7995ee.html</url>
      
        <content type="html"><![CDATA[<h1 id="CenterPoint-复现笔记"><a href="#CenterPoint-复现笔记" class="headerlink" title="CenterPoint 复现笔记"></a>CenterPoint 复现笔记</h1><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol><li><p>pytorch下载如果很慢，请采用镜像！</p></li><li><p>下载cmake使用apt，但要更新下载源为阿里云，这样版本才够新</p></li><li><p>安装spconv时报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">The following packages have unmet dependencies: gsettings-desktop-schemas <span class="token builtin class-name">:</span> Breaks: mutter <span class="token punctuation">(</span><span class="token operator">&lt;</span> <span class="token number">3.31</span>.4<span class="token punctuation">)</span> but <span class="token number">3.28</span>.4+git20200505-0ubuntu18.04.2 is to be installedE: Error, pkgProblemResolver::Resolve generated breaks, this may be caused by held packages.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>网络上一个解决方案是使用aptitude</p><pre class="line-numbers language-SHell" data-language="SHell"><code class="language-SHell"># download aptitudesudo apt install aptitudesudo aptitude install &lt;packagename&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>血泪教训，不要轻易使用aptitude，系统很多东西都被改写了，经过一番折腾升级到了ubuntu 20.04，也不知道之前安装的东西有没有被动</p><p>印象中提到”held packages”，应该按照那种方式解决</p></li><li><p>在下载 spconv 报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">CMake Error at CMakeLists.txt:2 <span class="token punctuation">(</span>project<span class="token punctuation">)</span>:  No CMAKE_CUDA_COMPILER could be found.  raise CalledProcessError<span class="token punctuation">(</span>retcode, cmd<span class="token punctuation">)</span>subprocess.CalledProcessError: Command <span class="token string">'['</span>cmake<span class="token string">', '</span>/home/declan/CenterPoint/spconv<span class="token string">', '</span>-DCMAKE_PREFIX_PATH<span class="token operator">=</span>/home/declan/anaconda3/envs/centerpoint/lib/python3.6/site-packages/torch<span class="token string">', '</span>-DPYBIND11_PYTHON_VERSION<span class="token operator">=</span><span class="token number">3.6</span><span class="token string">', '</span>-DSPCONV_BuildTests<span class="token operator">=</span>OFF<span class="token string">', '</span>-DCMAKE_CUDA_FLAGS<span class="token operator">=</span><span class="token string">"--expt-relaxed-constexpr"</span><span class="token string">', '</span>-DCMAKE_LIBRARY_OUTPUT_DIRECTORY<span class="token operator">=</span>/home/declan/CenterPoint/spconv/build/lib.linux-x86_64-3.6/spconv<span class="token string">', '</span>-DCMAKE_BUILD_TYPE<span class="token operator">=</span>Release<span class="token string">']'</span> returned non-zero <span class="token builtin class-name">exit</span> status <span class="token number">1</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试设置 CUDA 路径</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYTHONPATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${PYTHONPATH}</span>:/home/declan/CenterPoint"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/cuda-10.0/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CUDA_PATH</span><span class="token operator">=</span>/usr/local/cuda-10.0<span class="token builtin class-name">export</span> <span class="token assign-left variable">CUDA_HOME</span><span class="token operator">=</span>/usr/local/cuda-10.0<span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>/usr/local/cuda-10.0/lib64:<span class="token variable">$LD_LIBRARY_PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有效果。#241 issues和我问题一模一样 <a href="https://github.com/traveller59/spconv/issues/241">https://github.com/traveller59/spconv/issues/241</a></p><p>尝试增加路径 </p><p>try adding ‘-DCMAKE_CUDA_COMPILER=/usr/local/cuda-10.1/bin/nvcc’ in cmake_args</p><p>依旧失败</p><p>尝试使用不同版本的g++ sudo apt install g++-7，显示已经下载，我们需要切换版本</p><p>ls name* 可以列出所有name开头的包</p><p><a href="https://blog.csdn.net/FontThrone/article/details/104279224">https://blog.csdn.net/FontThrone/article/details/104279224</a></p><p>—slave 使得g++ gcc版本保持一致 70 90为重要权重priority</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 <span class="token number">70</span> --slave /usr/bin/g++ g++ /usr/bin/g++-7<span class="token function">sudo</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 <span class="token number">90</span> --slave /usr/bin/g++ g++ /usr/bin/g++-9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对g++和gcc进行管理</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">  Selection    Path            Priority   Status------------------------------------------------------------* <span class="token number">0</span>            /usr/bin/gcc-9   <span class="token number">90</span>        auto mode  <span class="token number">1</span>            /usr/bin/gcc-7   <span class="token number">70</span>        manual mode  <span class="token number">2</span>            /usr/bin/gcc-9   <span class="token number">90</span>        manual mode<span class="token function">sudo</span> update-alternatives --config gcc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功</p></li><li><p>选择了 nuScenes mini 数据集</p></li><li><p>运行测试</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python ./tools/dist_test.py infos_val_10sweeps_withvelo_filter_True.json  --work_dir work_dirs/CONFIG_NAME --checkpoint work_dirs/CONFIG_NAME/latest.pth --speed_test <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ModuleNotFoundError: No module named <span class="token string">'torchie'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尝试将torchie文档直接加入到PYTHONPATH当中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYTHONPATH</span><span class="token operator">=</span><span class="token variable">$PYTHONPATH</span>:/home/delcan/CenterPoint/det3d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:  File <span class="token string">"./tools/dist_test.py"</span>, line <span class="token number">211</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"./tools/dist_test.py"</span>, line <span class="token number">102</span>, <span class="token keyword">in</span> main    logger <span class="token operator">=</span> get_root_logger<span class="token punctuation">(</span>cfg.log_level<span class="token punctuation">)</span>  File <span class="token string">"/home/declan/CenterPoint/det3d/torchie/utils/config.py"</span>, line <span class="token number">146</span>, <span class="token keyword">in</span> __getattr__    <span class="token builtin class-name">return</span> getattr<span class="token punctuation">(</span>self._cfg_dict, name<span class="token punctuation">)</span>  File <span class="token string">"/home/declan/CenterPoint/det3d/torchie/utils/config.py"</span>, line <span class="token number">29</span>, <span class="token keyword">in</span> __getattr__    raise exAttributeError: <span class="token string">'ConfigDict'</span> object has no attribute <span class="token string">'log_level'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能是因为 nuscenes_mini 测试集原因</p><p><a href="https://github.com/tianweiy/CenterPoint/issues/106">https://github.com/tianweiy/CenterPoint/issues/106</a></p><p>我根据上面的内容对源码进行了修改，先尝试 train 一下</p><p>依旧报错，再检查可能是因为配置文件没有对的原因</p><p><a href="https://github.com/open-mmlab/mmdetection/issues/3093">https://github.com/open-mmlab/mmdetection/issues/3093</a></p><p>通过正确配置 <code>nusc_centerpoint_voxelnet_0075voxel_fix_bn_z.py</code> 文件解决上面报错</p><p><code>./configs/nusc/voxelnet/nusc_centerpoint_voxelnet_0075voxel_fix_bn_z.py</code></p><p>由于没有完整的 nuScenes 数据集，又有新的错误报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FileNotFoundError: <span class="token punctuation">[</span>Errno <span class="token number">2</span><span class="token punctuation">]</span> No such <span class="token function">file</span> or directory: <span class="token string">'nuScenes/samples/LIDAR_TOP/n008-2018-08-27-11-48-51-0400__LIDAR_TOP__1535385105950634.pcd.bin'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>跳过这里，尝试跑一个 demo</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python ./tools/dist_test.py ./configs/nusc/voxelnet/nusc_centerpoint_voxelnet_0075voxel_fix_bn_z.py --work_dir work_dirs/nusc_centerpoint_voxelnet_0075voxel_fix_bn_z --checkpoint work_dirs/nusc_centerpoint_voxelnet_0075voxel_fix_bn_z/latest.pth --speed_test <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FileNotFoundError: <span class="token punctuation">[</span>Errno <span class="token number">2</span><span class="token punctuation">]</span> No such <span class="token function">file</span> or directory: <span class="token string">'nuScenes/samples/LIDAR_TOP/n015-2018-10-02-10-50-40+0800__LIDAR_TOP__1538448754047572.pcd.bin'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查找目录发现这个文件其实是存在的，说明路径没有对，在 CentePoint 目录下添加 nuScenes 的软链接就可以解决了</p></li><li><p>最终 RuntimeError: CUDA out of memory 即使 batch_size = 1 也直接炸了，放弃！</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> papers </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CenterPoint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器部署hexo博客教程</title>
      <link href="/archives/d547a647.html"/>
      <url>/archives/d547a647.html</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云服务器ECS"><a href="#阿里云服务器ECS" class="headerlink" title="阿里云服务器ECS"></a>阿里云服务器ECS</h1><p>参考链接：</p><p><a href="https://www.bilibili.com/video/BV177411K7bH">狂神说_bilibili</a></p><p>官方链接：</p><p><a href="https://developer.aliyun.com/plan/grow-up">阿里云开发者成长计划</a></p><p><a href="https://developer.aliyun.com/adc/student?spm=a2c6h.19776329.J_4403085560.4.658b3d804yW1UU#J_3120529270">ECS训练营</a></p><p><a href="https://www.aliyun.com/product/ecs?spm=5176.224200.J_8058803260.52.1401586cYUB7hI">云服务器ECS</a></p><h2 id="学生机"><a href="#学生机" class="headerlink" title="学生机"></a>学生机</h2><p>如果是学生/新用户，一定要去看看有哪些优惠，比如<a href="https://developer.aliyun.com/plan/grow-up">阿里云开发者成长计划</a>。此刻阿里云提供的学生优惠是免费使用2个月的服务器资源。如果购买的话，一个1核2G的服务器就足够了</p><p><img src="/archives/d547a647/image-20210717163630430-1627213118656.png" style="zoom: 25%;"></p><h2 id="设置安全组"><a href="#设置安全组" class="headerlink" title="设置安全组"></a>设置安全组</h2><p>进入控制台开启端口，否则外部无法访问。除了默认的三个端口，通过“快速添加”，我再添加了 http(80) &amp; https(443) 两个端口。由于现在我对计算机网络一窍不通，所以先就这样吧</p><p><img src="/archives/d547a647/image-20210717155930905-1627213118658.png" style="zoom: 33%;"></p><h2 id="重置实例密码"><a href="#重置实例密码" class="headerlink" title="重置实例密码"></a>重置实例密码</h2><p>修改密码之后实例就会自动重启</p><p>然后就可以通过 <code>ssh root@ip</code> 连接到服务器，其中 ip 是你服务器的公网 ip</p><p><img src="/archives/d547a647/image-20210717162311907-1627213118658.png" style="zoom: 33%;"></p><h2 id="Enjoy"><a href="#Enjoy" class="headerlink" title="Enjoy"></a>Enjoy</h2><p>之后就可以像操作 Linux 一样，操作自己的服务器啦！</p><h2 id="将博客部署到服务器上"><a href="#将博客部署到服务器上" class="headerlink" title="将博客部署到服务器上"></a>将博客部署到服务器上</h2><p>几个参考教程：<a href="https://developer.aliyun.com/article/775005">阿里云教程</a> <a href="https://blog.csdn.net/weixin_41154636/article/details/99685965">csdn 教程</a> <a href="https://cloud.tencent.com/developer/article/1632020">腾讯云教程</a> <a href="https://zhuanlan.zhihu.com/p/120743882">知乎教程</a></p><p>在开始之前，先根据之前的 Linux 安装教程简单设置一下自己的服务器：添加新用户，更改主机名</p><p>现在本地配置好 hexo 环境，具体配置过程在之前的博客有详细记录</p><h3 id="在服务器上安装-git"><a href="#在服务器上安装-git" class="headerlink" title="在服务器上安装 git"></a>在服务器上安装 git</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum <span class="token function">install</span> -y <span class="token function">git</span><span class="token comment"># 安装成功后查看 git version</span><span class="token function">git</span> --version <span class="token function">git</span> version <span class="token number">2.27</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为之前在 Ubuntu 上使用的是 apt 包管理，在 CentOS 上则换为 yum 包管理。我试验了一下，如果不加 sudo 是不能下载成功的</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Error: This <span class="token builtin class-name">command</span> has to be run under the root user.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以我认为 yum 和 apt 一样需要 sudo 权限</p><h3 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h3><p>什么是 nginx？下面是官网描述</p><blockquote><p>NGINX is a high‑performance, highly scalable, highly available web server, reverse proxy server, and web accelerator (combining the features of an HTTP load balancer, content cache, and more).</p></blockquote><p>在我理解看来，部署网站的过程中 nginx 就是用来提供网页服务的服务器。这里就要更进一步理解什么是广义上的服务器</p><blockquote><p>从广义上讲，服务器是指网络中能对其它机器提供某些服务的计算机系统。从狭义上讲，服务器是专指某些高性能计算机，能通过网络，对外提供服务。</p></blockquote><p>使用以下命令安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum <span class="token function">install</span> -y nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="建立-git-仓库"><a href="#建立-git-仓库" class="headerlink" title="建立 git 仓库"></a>建立 git 仓库</h3><p>Hexo 可以使用 git 来部署，这样每次写完之后就都可以使用git来一键部署了，比较方便。我们先为系统添加一个 git 用户</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">useradd</span> -m <span class="token function">git</span> <span class="token comment"># 添加一个新用户</span><span class="token function">passwd</span> <span class="token function">git</span> <span class="token comment"># 设置git用户密码</span><span class="token function">su</span> <span class="token function">git</span> <span class="token comment"># 切换用户进行后续操作</span><span class="token builtin class-name">cd</span> /home/git/<span class="token function">mkdir</span> -p projects/blog <span class="token comment"># 把项目目录建立起来</span><span class="token function">mkdir</span> repos <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> repos<span class="token function">git</span> init --bare blog.git <span class="token comment"># 创建仓库</span><span class="token builtin class-name">cd</span> blog.git/hooks<span class="token function">vim</span> post-receive <span class="token comment"># 创建一个钩子</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>post-receive文件的内容如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/sh</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/home/git/projects/blog --git-dir<span class="token operator">=</span>/home/git/repos/blog.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>给 post-receive 添加执行权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">chmod</span> +x post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git init —bare 和 git init 有什么区别？ <a href="https://blog.csdn.net/sinat_34349564/article/details/52487860">csdn 链接</a></p><p>hooks有什么作用？ <a href="https://blog.csdn.net/weixin_41154636/article/details/99685965">csdn 链接</a></p><p>该钩子的意思是当本地有提交到服务器时，会将文件放在/home/hexo下</p><p><code>-f</code>这个参数如果在多人协作的博客中可能会引发不好的结果，因为他是强制更新的意思，会将本地版本覆盖掉远程服务器的版本，但是是个人的博客系统就无所谓了</p><h3 id="将公钥配置到服务器上"><a href="#将公钥配置到服务器上" class="headerlink" title="将公钥配置到服务器上"></a>将公钥配置到服务器上</h3><p>可以通过建立SSH信任关系，来免去登陆服务器时输入密码的步骤</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh-copy-id -i ~/.ssh/id_rsa.pub git@server_ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我尝试了一下自己手动复制 id_rsa.pub 到 authorized_keys 文件中，但是不能实现免密登陆，可能时复制时的字符串出现了问题，之前在 github 时也遇到了类似问题，直接复制公钥无法识别的情况</p><h3 id="更改-git-用户默认-shell"><a href="#更改-git-用户默认-shell" class="headerlink" title="更改 git 用户默认 shell"></a>更改 git 用户默认 shell</h3><p>为了安全，我们最好禁用 git 用户的 shell 登录权限。从而只能用 git clone，git push 等 git 操作访问服务器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">cat</span> /etc/shells <span class="token comment"># 查看 git-shell 是否在登录方式里面</span><span class="token function">which</span> git-shell <span class="token comment"># 找到git-shell的路径，记下来</span><span class="token function">sudo</span> <span class="token function">vim</span> /etc/shells <span class="token comment"># 把 git-shell 路径添加到文件末尾</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后更改 git 用户 shell</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/passwd<span class="token comment"># 将原来的 /bin/bash 改为 /usr/bin/git-shell</span><span class="token comment"># git:x:1001:1001::/home/git:/usr/bin/git-shell</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 这样当你再次用 ssh 连接 git 用户时就会出现以下信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">fatal: Interactive <span class="token function">git</span> shell is not enabled.hint: ~/git-shell-commands should exist and have <span class="token builtin class-name">read</span> and execute access.Connection to your_ip closed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="部署上线"><a href="#部署上线" class="headerlink" title="部署上线"></a>部署上线</h3><p>我们修改<strong>本地</strong> hexo 配置文件 _config.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@your_ip<span class="token punctuation">:</span>/home/git/repos/blog.git<span class="token comment"># repo: git@github.com:name/name.github.io.git</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置好后就是 hexo 三连一键部署：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /etc/nginx<span class="token function">cp</span> nginx.conf nginx_backup.conf <span class="token comment"># 备份配置文件</span><span class="token function">vim</span> nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有两个需要修改的地方：</p><ol><li><p>开头的 <code>user nginx</code> 要改为 <code>user root</code> </p></li><li><p>server 部分</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span> <span class="token comment">#监听80端口</span>        <span class="token directive"><span class="token keyword">server_name</span> 139.159.245.212</span><span class="token punctuation">;</span> <span class="token comment">#你的服务器名，通常是域名，如果是域名，你就需要监听80端口</span>        <span class="token directive"><span class="token keyword">root</span>       /home/git/projects/blog</span><span class="token punctuation">;</span> <span class="token comment">#网站的根目录</span>        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>配置好后 <code>nginx -s reload</code> 重新加载配置信息，如果是第一次进行加载，则还需要先运行命令 <code>nginx -c /etc/nginx/nginx.conf</code></p><p>现在你就可以通过 ip 地址访问你的网页啦！</p><p>我发现由于我的网站封面太大(有6M)，打开时加载比较慢。所以我需要压缩一下封面图片的大小，推荐两个压缩图片网站</p><p><a href="https://compressjpeg.com/">https://compressjpeg.com/</a></p><p><a href="https://tinypng.com/">https://tinypng.com/</a></p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>什么是域名？参考链接：<a href="https://www.bilibili.com/video/BV1kE411i7Jo?from=search&amp;seid=2556702162224412196">CodeSheep bilibili</a></p><p>建议阅读官方文档：<a href="https://help.aliyun.com/product/35473.html?spm=a2c4g.11186623.6.540.5b09689epNroGg">阿里云域名服务</a> <a href="https://help.aliyun.com/document_detail/61257.html?spm=a2c4g.11174283.2.6.36904c070bCdBM">什么是阿里云域名服务</a></p><p>根据官方文档 <a href="https://help.aliyun.com/document_detail/54068.htm?spm=a2c4g.11186623.2.13.5ff0689efHL52u#task-1830383">注册通用域名</a>，花费79元巨资注册了3年域名 hongkun.space</p><p><img src="/archives/d547a647/image-20210717235130445-1627213118658.png" style="zoom:50%;"></p><p>完成购买过后还需要进行：</p><ol><li><a href="https://help.aliyun.com/document_detail/35881.htm?spm=a2c4g.11186623.2.14.275a689e1pnnCW#concept-uhk-w5v-12b">实名认证</a>：一般3天左右审核通过</li><li><a href="https://beian.aliyun.com/pcContainer/formpage?page=selfBa&amp;pageAction=init&amp;orderType=100">域名备案</a>：初审1-2天，完整备案审核过程大概十多天</li></ol><p>注意需要先进行实名认证，然后才能完成备案</p><p>这里我还遇到一个问题，我通过学生优惠免费领取的服务器不能进行域名备案，因为至少需要有3个月的服务器使用权才能备案。看来还是得自己购买一个服务器，我再次花费巨资96元（新用户优惠）购买了一年的轻量应用服务器</p><h3 id="轻量应用服务器"><a href="#轻量应用服务器" class="headerlink" title="轻量应用服务器"></a>轻量应用服务器</h3><p><a href="https://www.aliyun.com/product/swas?spm=5176.8789780.J_8058803260.52.578945b5xsNx3V">轻量应用服务器</a>有单独的<a href="https://account.aliyun.com/login/login.htm?spm=5176.161059.J_5253785160.3.2c9ea505nvWZQs&amp;oauth_callback=https%3A%2F%2Fswas.console.aliyun.com%2F%3Fspm%3D5176.161059.J_835498.2.3e9f7fdaKmYuj7&amp;lang=zh#/servers">控制台</a>，用来部署网站性价比非常不错，配置过程和上面的云服务器一样</p><p>在轻量应用服务器的控制台中，域名解析和备案就在概览页面当中，根据流程进行即可</p><p><img src="/archives/d547a647/image-20210725173426850.png" style="zoom: 33%;"></p><h2 id="部署-SSL-证书-https"><a href="#部署-SSL-证书-https" class="headerlink" title="部署 SSL 证书 (https)"></a>部署 SSL 证书 (https)</h2><p>网站现在可以访问了，但是如下图可见，登陆网站会提示 <strong>Not Secure!!!</strong></p><p><img src="/archives/d547a647/image-20210802105224250.png" alt="image-20210802105224250" style="zoom: 50%;"></p><p>这可不能忍，于是我根据 <a href="https://blog.csdn.net/qq_33505555/article/details/106046616">CSDN 教程</a> 给阿里云服务器配置 SSL 证书，使用的是 FreeSSL 一个提供免费 https 证书申请的网站</p><h3 id="使用-FreeSSL-申请证书"><a href="#使用-FreeSSL-申请证书" class="headerlink" title="使用 FreeSSL 申请证书"></a>使用 FreeSSL 申请证书</h3><p>老规矩，先看看 <a href="https://blog.freessl.cn/tag/ssl-apply/">官网教程</a></p><ol><li><p>生成 CSR <a href="https://cloud.tencent.com/document/product/400/5367">什么是 CSR ? 腾讯云文档</a></p><p>教程中推荐使用 Keymanager 生成</p></li><li><p>在阿里云服务器中配置 DNS 解析，并对配置进行检测和验证</p><p>验证成功后可以在 FreeSSL 控制台中查看证书</p><p><img src="/archives/d547a647/image-20210802141326078.png" style="zoom:33%;"></p><p>在“更多操作”中可以下载证书，一个 pem 文件，一个 private.key</p><p><img src="/archives/d547a647/image-20210802141919162.png" style="zoom:33%;"></p></li><li><p>然后将证书 .pem 文件导入到 keymanager 中</p><p><img src="/archives/d547a647/image-20210802170924734.png" style="zoom: 25%;"></p></li><li><p>进行一键部署。基于你自己的框架，选择不同的部署方法，我选择部署到 Nginx 上。这里的“一键部署”实质上就是上传你的证书到服务器上</p><p><img src="/archives/d547a647/image-20210802171457165.png" style="zoom: 33%;"></p><p>部署成功过后，使用 <a href="https://myssl.com/">myssl.com </a> 检查网站的安全性。但是如果你的 Nginx 配置不对的话，</p></li><li><p>配置 Nginx</p><p>现在我们希望通过 https 443 端口来打开网站，与之前监听 http 80 端口，我们监听 443 端口，然后将 80 端口重定向</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>      <span class="token comment">#listen 80;</span>      <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span></span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">ssl</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">ssl_certificate</span> /etc/ssl/cert.pem</span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">ssl_certificate_key</span> /etc/ssl/key.pem</span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">server_name</span>  hongkun.space</span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">root</span>         /home/git/blog</span><span class="token punctuation">;</span>  ...  <span class="token punctuation">}</span>  <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>      <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">server_name</span> hongkun.space      <span class="token comment"># permenant redirect to https</span>      return <span class="token number">301</span> https://hongkun.space<span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置好过后重启 <code>nginx -s reload</code></p></li><li><p>现在访问网站，旁边就有高贵的<span class="github-emoji"><span>🔒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f512.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="/archives/d547a647/image-20210802173016910.png" style="zoom:50%;"></p><p>部署成功过后，还可以使用 <a href="https://myssl.com/">myssl.com </a> 检查网站的安全性</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件基础 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n assignment2 笔记</title>
      <link href="/archives/407bb789.html"/>
      <url>/archives/407bb789.html</url>
      
        <content type="html"><![CDATA[<h1 id="cs231n-2021-Assignment-2-note"><a href="#cs231n-2021-Assignment-2-note" class="headerlink" title="cs231n 2021 Assignment 2 note"></a>cs231n 2021 Assignment 2 note</h1><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>assignment 模板: <a href="https://github.com/cs231n/cs231n.github.io">github</a> </p><p>官方: <a href="https://cs231n.github.io/assignments2021/assignment2/">课程链接</a></p><p>assignment 参考链接: <a href="https://github.com/amanchadha/stanford-cs231n-assignments-2020">2020</a></p><p>发现了一种新的模式: pycharm + git + anaconda &amp; jupyter</p><p>上面的组合能够帮助写代码的效率提升，pycharm 能够帮助调试，git 用于版本管理，conda 用于环境管理。jupyter 在测试代码块上有很大的优势，并且很多 cs231n 的作业形式都是以 ipynb 的文件类型发布，更适合在 jupyter 上打开，而且 jupyter 能够直接使用创建好的 conda 环境，特别方便</p><p>经过一番折腾，最终决定使用 vs code 替换 pycharm，原因是 vs code 有 jupyter notebook 插件，可以直接显示在 editor 内，比 Pycharm 更方便而且以后想要学习其他语言 vs code 优势更大</p><h2 id="过程中的编程复习"><a href="#过程中的编程复习" class="headerlink" title="过程中的编程复习"></a>过程中的编程复习</h2><ol><li><p>重新复习了 numpy 的一些用法，一个重要思想就是尽量少考虑使用循环解决，要以 index 索引思想来解决数据的操作问题。</p><p>reshape已经存在的shape</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当接受参数是元组而是可变参数 <em>args 的时候，可以用 </em>tuple 来将参数变为 *args</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要学会善用矩阵点乘 A * B，是将对应元素相乘，在计算模的时候，或者当其中一个是 indication function 时很有用</p></li><li><p>重新复习了字典的用法，核心是创造字典，dict(), dict.fromkeys()</p><p>字典的 key, val 迭代器，如果不用 items，则只有 key</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>pas<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>对于格式化字符串有新的认知，下面例子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> weight_scale <span class="token operator">*</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以用这样的形式来调用 key</p></li></ol><h2 id="Fully-Connected-Networks"><a href="#Fully-Connected-Networks" class="headerlink" title="Fully Connected Networks"></a>Fully Connected Networks</h2><ol><li>对于网络的认知有了更新。要把层(layer, w)和点(node, x)分开来看，这样网络结构才更清晰。一般隐藏层不包含输出层</li><li><strong>反向传播熟悉 back propagation，尤其是矩阵相乘的反向传播，只需要记住结论就行了。对于广播过后的结果，需要将广播的矩阵作 sum 处理，得到广播前的对应元素梯度</strong></li><li>5 layers 和 3 layers 网络优化时比较，差异在哪里？5 layer 更难优化，对于初始值敏感</li><li><strong>对于优化算法进行了进一步了解，由三个核心点：AdaGrad, Momentum, EWA 最后自然推出 Adam 优化算法</strong></li><li><strong>在编写代码的时候重要的版本需要保存，这就需要使用 git</strong></li></ol><h2 id="Batch-normalization"><a href="#Batch-normalization" class="headerlink" title="Batch normalization"></a>Batch normalization</h2><p>进一步清晰了 bn 的过程与作用，可以回看自己的笔记了解详情</p><h3 id="Inline-Question-1"><a href="#Inline-Question-1" class="headerlink" title="Inline Question 1"></a>Inline Question 1</h3><p><strong>How does the scale of weight initialization affect models with/without batch normalization differently, and why?</strong></p><p>You should find that using batch normalization helps the network to converge much faster. </p><p>使用 batch normalization 会让网络在训练集上收敛更快。这和普通的 normalization 是一个道理，减少 zigzag 拐弯</p><p>还有几个需要知道和理解的点是：</p><ol><li>batch normalization 帮助缓解梯度消失/爆炸的问题，这将减缓因为 weight initialization 过大或过小而产生梯度消失/爆炸的问题</li><li>batch normalization 有一定的正则化效果，避免过拟合</li></ol><p><img src="/archives/407bb789/image-20210707160726541.png" style="zoom: 67%;"></p><h3 id="Inline-Question-2"><a href="#Inline-Question-2" class="headerlink" title="Inline Question 2"></a>Inline Question 2</h3><p><strong>hat does this imply about the relationship between batch normalization and batch size? Why is this relationship observed?</strong></p><p>一般规律是：batch size 越大训练集上收敛越快。当 batch size 比较小的时候，比 baseline 速度更慢，原因在于过少的样本带来的偏差太大，这样的噪音会影响训练和测试表现</p><p><img src="/archives/407bb789/image-20210707164225500.png" style="zoom: 67%;"></p><p>在训练和测试时均会用到 bn layer，测试时用的 $\mu,\sigma$  参数是训练过程中的指数加权平均 EWA</p><h3 id="Layer-Normalization"><a href="#Layer-Normalization" class="headerlink" title="Layer Normalization"></a>Layer Normalization</h3><p>用在 RNN 中更多，如果以后接触 NLP 领域的话再深入整理。简单的解释 <a href="https://zhuanlan.zhihu.com/p/74516930">知乎链接</a> </p><p>假设我们有 10行 3列 的数据，即我们的batchsize = 10，每一行数据有三个特征，这是一种“列缩放”。</p><p>而layer方向相反，它针对的是每一行进行缩放。即只看一笔数据，算出这笔所有特征的均值与方差再缩放。这是一种“行缩放”。</p><p>Q: 为什么 gamma 和 beta 还是原来的 (D, ) 形状？Layer normalization 在 RNN 中有什么作用？</p><p><img src="/archives/407bb789/image-20210707200112133.png" style="zoom: 67%;"></p><p>看得出 layer normalization 在训练上也是有一定作用的，但在图像方面相比于 batch normalization 效果差一点，另一个比较自然的结果是，对于 layer normalization 来说 hidden dimension 取较大值较好</p><h2 id="Drop-out"><a href="#Drop-out" class="headerlink" title="Drop out"></a>Drop out</h2><p>两行代码解决 (inverted) dropout layer 核心</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mask <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">input</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">&lt;</span> poutput <span class="token operator">=</span> <span class="token builtin">input</span> <span class="token operator">*</span> mask <span class="token operator">/</span> p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>vallina dropout 是在 test 时将输出乘以 p 使得输出是一个合理期望值。但如果我们在训练的时候已经除以 p 了，在测试时就不需要作任何操作。下图为正则化效果 regularization</p><p><img src="/archives/407bb789/image-20210708160433242.png" style="zoom:67%;"></p><h2 id="Convolutional-Neural-Networks"><a href="#Convolutional-Neural-Networks" class="headerlink" title="Convolutional Neural Networks"></a>Convolutional Neural Networks</h2><ol><li><p>用嵌套循环实现了最原始的卷积操作，使用 np.pad 函数能实现 padding 操作，感觉这个函数的参数不是那么灵活</p></li><li><p>返回最大值坐标 np.argmax，如果想要返回多元坐标还需要使用 np.unravel_index 转化</p><p><code>np.unravel(indices, shape)</code></p></li><li><p>assignment 提供了 fast_layers.py 来实现快速卷积操作，比我自己写的循环代码要快 1000 多倍，使用了 im2col 技巧以及 Cpython extension</p></li><li><p>为什么在正则化的时候正则项中不包括偏差 b? 个人理解认为 b 对于正则化的贡献并不大，而 w 参数则占据了绝大部分的参数。</p></li></ol><h3 id="Spatial-Batch-Normalization"><a href="#Spatial-Batch-Normalization" class="headerlink" title="Spatial Batch Normalization"></a>Spatial Batch Normalization</h3><p>这是卷积神经网络特有的 batch normalization。之前使用的 batch normalization 面对的是 (N, D) 形状的数据，但卷积过后得到的输出是类似 (N, C, H, W) 这样的多维数据。那我们应该怎样去计算这一批数据的统计量 $\mu, \sigma$ 呢？</p><p>如果沿着之前的思维，我们只沿着样本数据轴 N 去计算 $\mu, \sigma$ </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># data.shape = (N, C, H, W)</span>mean <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>data<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>var  <span class="token operator">=</span> np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>data<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这将会得到 (C, H, W) 形状的统计量，其中每一个值 (c, h, w)，其样本来自于 N 个像素点（同一 channel，同一位置）。但我们希望样本的数量更广泛一些，具体一点来说，我们希望样本来自于 N 个 feature map (H, W)，用 numpy 表示为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># data.shape = (N, C, H, W)</span>mean <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>data<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>var <span class="token operator">=</span> np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>data<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这将会得到 (C,) 形状的统计量，即：得到了对于某一个 channel 的统计量，这是合理的，因为同一个 channel 我们使用的是同一个 kernel。这样我们不仅得到了更广泛样本的统计量，还减少了参数数量</p><p>如果要使用之前写的 batch_norm 函数的话可以将数据转化为 (N <em> H </em> W, C) ，在 numpy 中使用 transpose + reshape 就可以完成</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> C<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Spatial-Group-Normalization"><a href="#Spatial-Group-Normalization" class="headerlink" title="Spatial Group Normalization"></a>Spatial Group Normalization</h3><p>一张图展示Batch Norm， Layer Norm ，Group Norm的区别</p><p><img src="/archives/407bb789/image-20210710193505933.png" alt="image-20210710193505933"></p><p>Group Norm可以理解为在layer Norm的基础上，输入维度为 (N, C, H, W)，对C进行分组，即 (N, G, C//G, H, W)。为了完成这一部分，重新思考了如何基于系统计算 back propagation</p><p><strong>可以以重要的中间变量为节点，根据计算图逐步推导梯度。难点在于有矩阵参与的计算，经常伴随着矩阵形状的改变，在进行 back propagation 中一定要让梯度跟着这些计算进行升维和降维，可以想象为梯度会随着这些节点形状的变化进行复杂的流动，有分流(例如降维度)，也有汇合(例如 broadcast)</strong></p><p>例如，在 forward pass 中 broadcast 会将矩阵升维，sum 会将矩阵降维，如果在 backward pass 中遇到 broadcast 操作时，则需要将 upper_grad 根据对应维度求和，举个例子，如果我们要求下面 X 的梯度的话，代码应该时这样的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># input: X, X.shape = (N, D)</span><span class="token comment"># f(X) = X - np.mean(X)</span><span class="token comment"># upper_grad = dout, dout.shape = (N, D)</span>dmean <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># sum broadcast dimension</span>dmean <span class="token operator">=</span> dmean <span class="token operator">/</span> N<span class="token comment"># mean operation back prop</span>dX <span class="token operator">=</span> dout <span class="token operator">-</span> dmean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想不使用计算图直接按照一般的矩阵梯度计算，遇到对矩阵/向量求导时，就会出现张量，也就是说维度会增加，需要熟悉张量的运算及其思维。还是借用上面的例子，但我们把平均值作为 (N, D) 形状来看待</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># input: X, X.shape = (N, D)</span><span class="token comment"># f(X) = X - np.mean(X) * np.ones(X.shape)</span><span class="token comment"># upper_grad = dout, dout.shape = (N, D)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script type="math/tex; mode=display">\frac{\partial{loss}}{\partial{f(x)}} = dout，\ f(x)=x-\mu\\\frac{\partial{f(x)}}{\partial{\mu}} = a\ ((N\times D) \times (N\times D))\ shape\ tensor\\\frac{\partial{loss}}{\partial{\mu}}=\frac{\partial{loss}}{\partial{f(x)}} ·\frac{\partial{f(x)}}{\partial{\mu}}=dout\\\frac{\partial{\mu}}{\partial{x}} = a\ ((N\times D) \times (N\times D))\ shape\ tensor\\\frac{\partial{loss}}{\partial{x}}=\frac{\partial{loss}}{\partial{f(x)}}·\frac{\partial{f(x)}}{\partial{x}} - \frac{\partial{loss}}{\partial{f(x)}}·\frac{\partial{f(x)}}{\partial{\mu}}·\frac{\partial{\mu}}{\partial{x}}=dout -dout·\frac{\partial{\mu}}{\partial{x}}</script><p>这将是一种普适的方法，更加抽象化，能够处理任何的矩阵求导，但不推荐实际中使用。</p><p>不论使用哪种方法，最核心的还是要理解梯度流动的本质——某一个变量的变动能够引起输出多少变动</p><h2 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h2><h3 id="Fully-Connected-Layer"><a href="#Fully-Connected-Layer" class="headerlink" title="Fully Connected Layer"></a>Fully Connected Layer</h3><p>现在卡在了 solver 上</p><p>不能得到 overfitting 的结果</p><ol><li><p>尝试更换 solver 看能否得到不一样的结果</p><p>失败了</p></li><li><p>尝试使用2016的所有答案，看是否是自己的代码出问题了</p><p>失败了</p><p>小技巧 Ctrl+r 能够更换 pycharm 相同字段</p></li><li><p>尝试更改 colab 本身的文件，使用2016年的colab文件</p><p>成功，原因在于 learning rate 太小了，不能找到全局最优</p></li></ol><h3 id="Batch-normalization-1"><a href="#Batch-normalization-1" class="headerlink" title="Batch normalization"></a>Batch normalization</h3><ol><li><p>卡在了计算 back prop 上</p><p>最后出现的失误还是在于每一个公式必须要精确才行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">norm_x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> sample_mean<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>sample_var <span class="token operator">+</span> eps<span class="token punctuation">)</span>norm_x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> sample_mean<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>sample_var<span class="token punctuation">)</span> <span class="token operator">+</span> eps<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面两个式子虽然在计算结果上相差不多，但是在网络的计算中，一点点的误差传播过后会变得越来越大</p></li><li><p>尝试使用 jupyter 进行编程，遇到问题：The kernel appears to have died. It will restart automatically</p><p>以为是 jupyter 的问题，但测试了不同的软件都出错了，最终发现是自己代码的问题！当找了一圈没有找到答案时，可能就要怀疑自己了，而不是怀疑软件出了问题！不过这也有好处，让我决定放弃使用 pycharm 转战 vs code</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs231n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装笔记</title>
      <link href="/archives/53e3a160.html"/>
      <url>/archives/53e3a160.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装Linux笔记"><a href="#安装Linux笔记" class="headerlink" title="安装Linux笔记"></a>安装Linux笔记</h1><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ol><li><p>如何安装双系统：移步 bilibili（建议安装最新版，美观且体验更友好）</p></li><li><p>设置root密码。然后创建新用户，并设置新用户密码以及 sudo 权限。</p></li><li><p>修改 /etc/hostname，reboot 后永久更改主机名</p></li><li><p>可能出现启动windows的时候有bitlocker，禁用bitlocker安全协议</p></li><li><p>配置代理clash，从youtube上视频学的（迷途小书童），要点就是将已经配置好的config.yml和Country.mmdb文件移动到./.config/clash文件夹下面，重新命名 config.yml 为 config.yaml，通过 clash dashboard 切换节点 <a href="http://clash.razord.top/">http://clash.razord.top/</a></p><p>让Terminal走代理的方法(desktop上的settings中设定会改写terminal端，使用export改写则不会影响desktop)，参考 <a href="https://zhuanlan.zhihu.com/p/46973701">知乎链接</a></p></li><li><p>官网下载git anaconda chrome typora chrome baiduyun vscode软件并安装</p><p>conda install, pip install 下载速度慢时，请使用国内镜像源，例如：</p><ol><li><p><a href="https://mirrors.bfsu.edu.cn/help/anaconda/">北京外国语大学镜像源</a>（推荐，截至2021/6/15下载速度很快）</p></li><li><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/">清华镜像源</a></p></li></ol></li><li><p>配置nvidia driver: 根据 <a href="https://zhuanlan.zhihu.com/p/59618999">知乎链接</a> ，在命令行里下载推荐的driver。如果在配置nvidia driver的过程中出现连接不上显卡，可能需要关闭 security boot。根据 <a href="https://zhuanlan.zhihu.com/p/108930996">知乎链接</a> 下载安装CUDA，选择runfile。</p><p>参考 <a href="https://zhuanlan.zhihu.com/p/336429888">稚晖君</a> 的教程，如果想移除所有cuda, cudnn, nvidia driver</p><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL">sudo apt-get remove --purge nvidia*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>教程里还教了如何更新apt source为阿里云镜像，里面的软件会更新而且下载更快。同时也设置了 sudo，让每一次 sudo 都不需要输入密码</p></li><li><p>pip install 遇到问题 enter your password to unlock your login keyring</p><p>解决方法，直接cancel，或者在passwd and key中更改密码</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 教程</title>
      <link href="/archives/2121b11b.html"/>
      <url>/archives/2121b11b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-reorganiszed-note"><a href="#Git-reorganiszed-note" class="headerlink" title="Git reorganiszed note"></a>Git reorganiszed note</h1><p>重新整理了 git 的常用操作命令，能够覆盖大部分版本管理场景，适合作为提纲进行复习</p><p>整理来自：<a href="https://www.bilibili.com/video/BV1FE411P7B3?from=search&amp;seid=1905221215711628694">bilibili</a> <a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰教程</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当遇到国外资源下载很慢的时候，可以考虑使用镜像资源</p><p>视频里使用了淘宝镜像安装 windows 版本 <a href="https://npm.taobao.org/mirrors/">https://npm.taobao.org/mirrors/</a></p><p>ubuntu 直接使用 apt install git 使用阿里云镜像</p><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><p>首先要理解的是，在windows 中 git bash 的基本操作命令和 Linux  terminal 是一样的。在 Linux 中 git 是集成到 terminal 当中的</p><h3 id="git-config"><a href="#git-config" class="headerlink" title="git  config"></a>git  config</h3><p>配置用户名和邮箱</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> config --global user.name <span class="token string">'your_name'</span><span class="token function">git</span> config --global user.email <span class="token string">'***@qq.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后的所有提交都会使用你的用户和邮箱</p><p>还可以根据需求配置代理</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 设置代理</span><span class="token function">git</span> config --global http.proxy http://127.0.0.1:1080<span class="token comment"># 查看代理</span><span class="token function">git</span> config --global --get http.proxy<span class="token comment"># 取消代理</span><span class="token function">git</span> config --global --unset http.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Git-基本理论"><a href="#Git-基本理论" class="headerlink" title="Git 基本理论"></a>Git 基本理论</h2><p>直接上图，重点关注左侧命令</p><p><img src="/archives/2121b11b/image-20210628141830141.png" style="zoom:80%;"></p><p>从工作区 -&gt; 暂存区：git add</p><p>从暂存区 -&gt; 本地仓库：git commit</p><p>从本地仓库 -&gt; 远程仓库：git push</p><p>这三个命令就能够让你感受到 git 版本控制的基本流程</p><h2 id="Git-仓库搭建"><a href="#Git-仓库搭建" class="headerlink" title="Git 仓库搭建"></a>Git 仓库搭建</h2><h3 id="git-init-amp-git-clone"><a href="#git-init-amp-git-clone" class="headerlink" title="git init &amp; git clone"></a>git init &amp; git clone</h3><p>生成仓库(master 分支)的两种方法</p><ol><li><p>git init 初始化，生成 .git 文件</p></li><li><p>git clone url 克隆远程仓库</p></li></ol><p>删除仓库则只需要删除 .git 文件夹即可</p><h2 id="Git-文件基本操作"><a href="#Git-文件基本操作" class="headerlink" title="Git 文件基本操作"></a>Git 文件基本操作</h2><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>git status 查看 git 文件状态，git status file_name 可指定文件</p><p>文件的几种状态：</p><ol><li>untracked 文件在文件夹中，从没有 add 过</li><li>unmodify 文件已经 commit 且库中最新版本和当前文件是一致的，可以通过 git rm 将其移出版本库管理</li><li>modified 文件在 commit 或者 add 过后有过修改，可以使用 git checkout 丢弃修改</li><li>staged (文件在之前 commit 过后有过修改) 经过 add，没有 commit</li></ol><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>有些时候我们不想把某些文件纳入版本控制中，可在主目录下建立 .gitignore 文件，例如你不详把 txt 类型文件进行版本控制，则在 .gitignore 文件中写入 *.txt 即可，其他具体规则不作介绍，也比较简单。</p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p>git add file_name 将文件加入暂存区，文件成为 staged 状态</p><p>git add . 将当前文件夹 add，比较方便快捷</p><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>git commit -m ‘massage you want to say’ 将暂存区所有文件加入到版本库中，并留下此次提交的 message</p><h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><p>将已经 commit 的文件从版本库中移除变为 untracked 文件</p><p>git rm —cached file_name</p><h2 id="Git-版本回退"><a href="#Git-版本回退" class="headerlink" title="Git 版本回退"></a>Git 版本回退</h2><h3 id="git-log-amp-git-reflog"><a href="#git-log-amp-git-reflog" class="headerlink" title="git log &amp; git reflog"></a>git log &amp; git reflog</h3><p>git log 查看 commit 历史记录，id，作者等信息</p><p>git reflog 查看所有的操作</p><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p>回退到某一个 commit 版本，id 只用写前几位，git 自动识别</p><p>git reset —hard commit_id</p><p>回退到上一个 commit 版本，如果回退两个则是 HEAD^^</p><p>git reset —hard HEAD^</p><p>—hard 参数其实代表回退到某个 commit 后，该 commit 之后的记录都会被丢弃。但 git 永远都有后悔药吃，如果回退到以前的版本想要再回来，使用 git reflog 查看所有命令</p><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><p>git checkout 能够让文件回到最近一次 add 或者 commit 时的状态</p><p>git checkout file_name</p><h2 id="分支与冲突"><a href="#分支与冲突" class="headerlink" title="分支与冲突"></a>分支与冲突</h2><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><p>从这里我们可以更加深入理解 git 的工作形象，working tree</p><p>除了 master 分支，我们还可以创建其他分支，HEAD 所指的就是 working tree “生长”的地方，然后我们将分支合并，也即让 master “赶上来”，再删除 dev 分支。git 分支还有一个一般规则是，master 分支永远是最稳定的分支，开发都在 dev 或其他分支上进行</p><p><img src="/archives/2121b11b/branch_1.png" style="zoom: 50%;"></p><p><img src="/archives/2121b11b/branch_2.png" style="zoom: 50%;"></p><p><img src="/archives/2121b11b/branch_3.png" style="zoom:50%;"></p><p>使用 git branch 查看分支情况，也可用于删除分支</p><p>git branch -d branch_name</p><h3 id="git-switch"><a href="#git-switch" class="headerlink" title="git switch"></a>git switch</h3><p>使用 git swich 来创建和切换分支</p><p>git switch -c branch_name</p><p># 复制远程的分支到本地</p><p>git switch -c branch_name origin/branch_name</p><p>git switch branch_name</p><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><p>将某个分支合并到当前分支</p><p>git merge branch_name</p><p>如果发生了冲突：两个 branch 中在同一个文件中有不同的修改而无法合并，那么需要解决冲突。（判断文件是否有修改，是根据 commit id 之类的标记节点来判断的，但是否存在冲突则是根据文件的内容）</p><p><img src="/archives/2121b11b/branch_4.png" style="zoom:50%;"></p><p>先使用 git status 查看哪个文件发生冲突，然后使用 vim 编辑，git 会自动在文档中标明冲突的地方。怎样修改无所谓，只要你 add &amp; commit 过后，git 就会默认冲突解决，并将你的文件作为最新的版本加入版本库中，更新 working tree</p><p>如果对于 git 中 recursive 3-way merge 算法感兴趣，可以参看<a href="https://en.wikipedia.org/wiki/Merge_(version_control">维基百科</a></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="添加远程仓库-github-or-gitee"><a href="#添加远程仓库-github-or-gitee" class="headerlink" title="添加远程仓库 github or gitee"></a>添加远程仓库 github or gitee</h3><p>gitee 为国内网站，传输速度更快。通过以下步骤将本机与远程连接（以 github 为例）：</p><ol><li><p>注册 github 账号</p></li><li><p>生成 ssh 公钥</p><ol><li><p>在本机 user 目录下找到 ssh 文件夹（安装 git 过后这个文件夹会自动生成）</p></li><li><p>在 shell 中运行以下命令生成 ssh 密钥，其中 rsa 是一种加密算法 </p><p><code>ssh-keygen -t rsa</code></p><p>之后你就能在 .ssh 文件中找到 id_rsa 和 id_rsa.pub 文件</p></li></ol></li><li><p>添加 id_rsa.pub 到 github 账户设置中</p></li></ol><p>这样就把本机和远程仓库连接起来了，具体的说是将本机与你的 github 账号通过 ssh 连接起来了</p><h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>你的账号里可以有很多的仓库，我们想要将本地仓库与某一个指定仓库链接使用以下命令即可</p><p>git remote add origin [url]</p><p>远程仓库的名字叫 origin，这是 git 的默认叫法，url 是仓库的 https 或者 ssh</p><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p>把本地库的内容推送到远程仓库，使用下面命令</p><p>git push -u orgin master</p><p>这样就把本地 master 分支内容推送到了远程新的 master 分支。-u 参数为 set upstream 的意思，在推送的同时将我们的本地 master 分支和远程 master 分支联系起来（相当于作了 <code>git branch -u origin</code> ），今后则可以直接输入 git push 来简化推送命令，强烈建议在第一次 push 的时候带上 -u 参数</p><p>其他本地分支与远程分支的 push 和连接也是一样的，把上面命令的 master 改为对应分支的名字（例如：dev 分支）即可，前提是本地要切换到那个分支，且远程存在同名的分支。</p><p>个人认为 git push 一般是在同名的本地分支和远程分支之间进行</p><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p>文件冲突不仅出现在本地的 merge 当中，也存在在 push 操作当中。push 的本质也是将本地和远程这两个 branch 进行融合。当这个远程仓库只有你一个人在 push 时，是不会有冲突的，因为远程的 working tree 只会一直往前延伸；当有多个人都在对某一个文件进行修改，working tree 就相当于有了多个分支，在 push 的时候就会形成冲突。如果有远端的冲突形成，就需要使用 git pull</p><p>git pull 有两个作用，一个是拉取代码到本地，另一个是尝试与本地代码合并，如果不能使用 fast forward 合并，则需要自己来修改冲突部分，这部分和 git merge 是一样的</p><h2 id="Git-IDE"><a href="#Git-IDE" class="headerlink" title="Git + IDE"></a>Git + IDE</h2><p>现在 git 和很多 IDE 都有联动，可以直接在 IDE 中方便的操作 git！</p><p>以 pycharm 为例，只需要在你的项目文件夹下 git init 就可以 </p>]]></content>
      
      
      <categories>
          
          <category> 软件基础 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-theme-matery 教程</title>
      <link href="/archives/b129f5ae.html"/>
      <url>/archives/b129f5ae.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-matery-note"><a href="#hexo-theme-matery-note" class="headerlink" title="hexo-theme-matery note"></a>hexo-theme-matery note</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>参考原 github 项目进行整理：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><h3 id="config-yml-的修改建议"><a href="#config-yml-的修改建议" class="headerlink" title="_config.yml 的修改建议"></a>_config.yml 的修改建议</h3><p>在 hexo 根目录下的 _config.yml 文件中：</p><ol><li><p>切换 theme 为 hexo-theme-matery</p></li><li><p>url 改为网站 url (如：<a href="http://xxx.github.io">http://xxx.github.io</a>)</p></li><li><p>per_page 数值改为6及6的倍数，这样文章列表在各个屏幕下都能较好显示</p></li><li><p>插入图片（有点复杂，可以先跳过）。根据 <a href="https://zhuanlan.zhihu.com/p/265077468">知乎链接</a> 配置好 post_asset_folder，里面提到的 typora 技巧也很实用，建议采用。且一般来讲链接中提到的 hexo-renderer-marked 插件都是已经内置好的，不然你的博客不会渲染成功。</p><p>但是这个方法不能控制图片大小，而且配置过 typora 后还要再改图片的路径。我再下载了 hexo-asset-image 插件过后，直接用 typora 中的 html 方法 <code>&lt;img src='post_name/img.jpg'&gt;</code>引用图片，不需要二次更改路径</p></li></ol><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> hexo new page <span class="token string">'categories'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>categories 页是用来展示所有分类的页面</p><p>修改 <code>/source/categories/index.md</code> 文件的 front-matter (Front-matter 是文件最上方以 —- 分隔的区域，用于指定个别文件的变量)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">---title: categoriesdate: <span class="token number">2018</span>-09-30 <span class="token number">17</span>:25:30type: <span class="token string">"categories"</span>layout: <span class="token string">"categories"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于 page 和 post 的区别：两者其实很相似，你可以把 page 看作是特殊的 post，用来放置一些特殊内容：如分类、标签等等。</p><p>hexo 的分类是有等级关系的，我们以下面的 post front-matter 为例</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">title: 我的博客搭建笔记date: 2021-06-29 15:26:41tags:<span class="token list punctuation">-</span> hexo<span class="token list punctuation">-</span> 博客搭建categories:<span class="token list punctuation">-</span> 软件基础<span class="token list punctuation">-</span> hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件在分类时会被分配到所有提到的 categories 中，这些 categories 的路径是逐渐往下的 <code>/categories/软件基础/hexo/</code>，它们都有自己的 page 来收纳属于自己类别的文章。</p><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p>新建 page</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改对应 index.md</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">---title: tagsdate: <span class="token number">2018</span>-09-30 <span class="token number">18</span>:23:38type: <span class="token string">"tags"</span>layout: <span class="token string">"tags"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给 post 指定 tags 只需要在 front-matter 中写好就行了，如上面 categories 的例子。</p><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><h3 id="新建留言板-contact-页"><a href="#新建留言板-contact-页" class="headerlink" title="新建留言板 contact 页"></a>新建留言板 contact 页</h3><h3 id="新建友情链接-friends-页"><a href="#新建友情链接-friends-页" class="headerlink" title="新建友情链接 friends 页"></a>新建友情链接 friends 页</h3><p>新建方法都是和上面的方法一样的</p><h2 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h2><h3 id="名称、路径、图标"><a href="#名称、路径、图标" class="headerlink" title="名称、路径、图标"></a>名称、路径、图标</h3><p>配置菜单导航的名称、路径url、和图标icon，配置文件在 <code>themes/hexo-theme-matery/._config.yml</code></p><p>更改 menu 部分即可</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">menu:  <span class="token comment"># 把 Index 改为 Home</span>  Home:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可该的部分：</p><ol><li>名称可以是中文</li><li>图标可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中查找</li><li>还可以使用二级菜单。二级菜单在实现上可以理解为创建了一个软链接，到你指定的 page 上。</li></ol><p>由于我对于这个导航还是比较满意，就不作过多修改</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><p>由于代码看不明白，找到了一个比较详细的教程</p><p><a href="https://sunhwee.com/posts/6e8839eb.html">https://sunhwee.com/posts/6e8839eb.html</a></p><p>根据上面的链接修改了版权信息，增加了网站运行时间，访问人数的代码目前不需要修改</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code></p><p>以上的设置并不管用，没有高亮也没有行号</p><p>但是我下载了 hexo-prism-plugin 又卸载掉这个插件，就有高亮了，但依旧没有行号</p><p>考虑是 matery.css 文件中 pre 下 paddidng 不够大的问题，增加 padding 但依然没能解决</p><p>考虑是不是本身 prism 文件出了问题，重新到官网上下载了 prism.js 和 prism.css 替换原来系统中对应的文件，同时调整上面提到的 padding 参数，最后成功！</p><p>prism.js 文件位置在 <code>node_modules/prismjs</code></p><p>prism.css 文件位置在 <code>themes/hexo-theme-matery/source/libs/prism</code></p><p>现在想要去除隔离的那条竖线，尝试重复下面链接的操作，操作过后竖线没有去除，不过稍微调整了一下代码位置，也挺好看</p><p><a href="https://github.com/blinkfox/hexo-theme-matery/issues/103">https://github.com/blinkfox/hexo-theme-matery/issues/103</a></p><p>最终，我通过修改 prism.css 中 border-right 为 0px，去除了行号和代码之间的分隔线！</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.line-numbers .line-numbers-rows</span> <span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> -0.2em<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> -3.8em<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span> <span class="token comment">/* works for line-numbers below 1000 lines */</span><span class="token property">letter-spacing</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span><span class="token property">border-right</span><span class="token punctuation">:</span> 0px solid #999<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在解决标号和 code 没对齐的问题，修改 prism.css 文件中 <code>.line-numbers .line-numbers-rows</code> 下 top 参数为 -0.2em，微调成功！治好了强迫症！</p><h2 id="配置-theme-中的-config-yml"><a href="#配置-theme-中的-config-yml" class="headerlink" title="配置 theme 中的 _config.yml"></a>配置 theme 中的 _config.yml</h2><ol><li><p>根据配置文件中的注释，简单修改了下面的设置</p><p>dream, music, video, recommend, github &amp; social link, reward, clicklove, myProjects, mySkills, subtitle, banner</p></li><li><p>取消 rainbow 特效</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.bg-cover:after</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 hexo d 时遇到问题</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">err: Error: Spawn failed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二天自动好了，根本原因是网络没有走通的问题，之后可能再次遇到，到时候再解决，建议在 github 上搜索</p><p>现在发现了，由于我使用的是 root 用户下的 git 配置，而我 root 用户下 git config 没有设置好参数所以部署失败。我在 root 目录的 .gitconfig 和 .ssh 下配置好了 user.name ssh 等必要 git 配置就成功了。这说明了在 linux 下不同的用户都需要自己去配置 git</p></li><li><p>修改博客 feature image 只选用1张简单图来代表。原来有 24 张图，我把24个路径全部改为同1张图。</p></li><li><p>因为之后需要写入数学公式，将 mathjax 改为 true。但发现显示公式渲染不正常，而且小括号显示不出来。根据 <a href="https://github.com/blinkfox/hexo-theme-matery/issues/119">github issue</a> 解决无法换行问题，将渲染器换为 hexo-renderer-kramed 而且代码高亮插件似乎并没受到影响。根据 <a href="https://adaning.github.io/posts/33457.html">MathJax常见问题</a> 解决小括号无法显示问题。</p></li></ol><h2 id="配置-matery-css"><a href="#配置-matery-css" class="headerlink" title="配置 matery.css"></a>配置 matery.css</h2><p>为了进一步设置我们的网页，让其更具有个性化，就需要进一步调整 matery.css 文件。</p><ol><li><p>设置 导航颜色</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #BEBEBE 0%<span class="token punctuation">,</span> #708090 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查询颜色代码网址：<a href="https://tool.oschina.net/commons?type=3">https://tool.oschina.net/commons?type=3</a></p></li><li><p>由于刚开始加载时 banner 图片没有迅速加载，会默认先加载橙色，我改成灰色</p><p>修改“\Hexo\themes\hexo-theme-matery\layout\ _partial\index-cover.ejs”文件中的第63行即可。</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel-item red white-text bg-cover about-cover<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把“red”修改为其他颜色即可。我改为 slate gray</p></li><li><p>改变 progress-bar 颜色</p></li><li><p>改变回到顶部按钮颜色 top-scroll</p></li><li><p>改变封面打字效果的文字大小、颜色 .bg-cover .description</p></li><li><p>修改了打字效果的颜色过后，我发现文章标题的颜色也跟着改了。解决方法是在下面的 .bg-cover .description 增加属性 color: #color_code，这样就能分别调整它们的颜色。</p></li><li><p>修改 about 页面链接颜色 aboutme</p></li><li><p>修改 archive 页面时间线颜色 cd-timeline</p></li></ol><h2 id="插件优化"><a href="#插件优化" class="headerlink" title="插件优化"></a>插件优化</h2><h3 id="文章-url-优化"><a href="#文章-url-优化" class="headerlink" title="文章 url 优化"></a>文章 url 优化</h3><p>我没有使用项目中主要介绍的转拼音方法，那样生成的链接太长了，而是使用 hexo-abbrlink 插件</p><pre class="line-numbers language-sehll" data-language="sehll"><code class="language-sehll">npm install hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在根目录 _config.yml 文件中修改</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> archives/<span class="token punctuation">:</span>abbrlink.html<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>    <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc32   <span class="token comment">#算法： crc16(default) and crc32</span>    <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex     <span class="token comment">#进制： dec(default) and hex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 hexo 三连时遇到报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FATAL YAMLException: duplicated mapping key <span class="token punctuation">(</span><span class="token number">111</span>:1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明有原配置文件中已经有 permalink 的定义，我们需要把里本身的 permalink 代码注释掉，完美运行！现在我们的文章 url 最后是特殊的数字id <code>/archives/48732.html</code></p><h3 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h3><h3 id="添加-emoji-表情支持"><a href="#添加-emoji-表情支持" class="headerlink" title="添加 emoji 表情支持"></a>添加 emoji 表情支持</h3><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>上面三个部分都是按照 hexo-thme-matery github 项目配置的</p><h3 id="评论插件utterance"><a href="#评论插件utterance" class="headerlink" title="评论插件utterance"></a>评论插件utterance</h3><p>matery 在配置文件中告诉我们，有的评论软件有安全隐患，推荐使用 utterance</p><p>尝试 utterance，如果成功，则返回卸载 valine，注销 lean cloud</p><p>也尝试了 livere 安装也很不友好</p><p>成功在 contact 页面下展示了 utterance，方法是在 contact.ejs 文档下找了一个地方插入下面的代码（记得改为 r自己的 github repo，形式为 <owner>/<name> ），</name></owner></p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://utteranc.es/client.js<span class="token punctuation">"</span></span><span class="token attr-name">repo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[ENTER REPO HERE]<span class="token punctuation">"</span></span><span class="token attr-name">issue-term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pathname<span class="token punctuation">"</span></span><span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-light<span class="token punctuation">"</span></span><span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token attr-name">async</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我插入在 <code>&lt;div class="card"&gt;</code> 后面，是管用的。因为原项目说，插入到你的 layout 需要出现的地方，我不懂前端的代码，只能胡乱插入了，管用就行！我猜测这是一个“卡片类”能够存放你的内容，以白色卡片在页面中展示出来。</p><p>用同样的方法在 post 下添加评论。找到 <code>/hexo-theme-matery/layout/_partial/post-detail.ejs</code> 文件，找到评论的布局之处（搜索主题自带的评论插件如 gittalk，就能找到）插入上面的代码即可。但是渲染过后背景是透明的，不太好看，我希望想 contact 一样有白色背景，那就复制一下 contact.ejs 中的“卡片类”评论区就行了。</p><h3 id="分类优化"><a href="#分类优化" class="headerlink" title="分类优化"></a>分类优化</h3><p>matery 主题的分类没有多层分类，在 categories 页面只有像 tag 一样标签，这样的分类又有什么用呢？根据 <a href="https://notes.zhangxiaocai.cn/posts/5a99eb4d.html#toc-heading-8">Hexo Matery 主题添加多级分类</a> 进行设置，可以得到更好的分类页，类别之间将有层次关系</p><p>具体来讲，采用了博客里最新更新的代码，又作了以下改动：</p><ol><li><p>给 category-item, category-count 等增加 color 属性，改为自己喜欢的颜色</p></li><li><p>给 category-title 增加 font-size 属性，修改标题大小</p></li><li><p>由于每次进入目录默认要展开一个类别，改动下方代码，让所有类别初始状态默认折叠</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* origin code: &lt;li  class="&lt;%= subCats.length &gt; 0 ? 'active' : '' %&gt;" &gt; */</span><span class="token operator">&lt;</span>li  <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"&lt;%= subCats.length &gt; 10000 ? 'active' : '' %&gt;"</span> <span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除箭头变化 <code>category-item-action col s11 m11</code></p></li></ol><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><h3 id="网站SEO优化"><a href="#网站SEO优化" class="headerlink" title="网站SEO优化"></a>网站SEO优化</h3><p>Search Engine Optimization</p><p>将自己的网站提交给搜索引擎</p><h3 id="不断更新"><a href="#不断更新" class="headerlink" title="不断更新"></a>不断更新</h3><p>持续更新博客内容，完善分类</p>]]></content>
      
      
      <categories>
          
          <category> 软件基础 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客搭建笔记</title>
      <link href="/archives/4984.html"/>
      <url>/archives/4984.html</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客搭建-hexo"><a href="#个人博客搭建-hexo" class="headerlink" title="个人博客搭建 hexo"></a>个人博客搭建 hexo</h1><p>整体参考过程为 CodeSheep 视频：<a href="https://www.bilibili.com/video/BV1Yb411a7ty">https://www.bilibili.com/video/BV1Yb411a7ty</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Node-js-amp-npm"><a href="#Node-js-amp-npm" class="headerlink" title="Node.js &amp; npm"></a>Node.js &amp; npm</h3><p>参考链接：<a href="https://developer.aliyun.com/article/760687">https://developer.aliyun.com/article/760687</a></p><p>我选择了 apt 安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nodejs <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>版本信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nodejs --versionv10.19.0<span class="token function">npm</span> --version<span class="token number">6.14</span>.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>版本还是有点老旧</p><h3 id="淘宝镜像-cnpm"><a href="#淘宝镜像-cnpm" class="headerlink" title="淘宝镜像 cnpm"></a>淘宝镜像 cnpm</h3><p>cnpm 的官方介绍是：cnpm是一个完整 npmjs.or 镜像，你可以用此代替官方版本(只读)，同步频率目前为 <strong>10分钟</strong> 一次以保证尽量与官方服务同步。</p><p>安装了 cnpm 就可以使用镜像资源下载包，如果不希望使用镜像资源则换回 npm 命令即可。使用如下命令安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> cnpm <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>版本信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo -vhexo-cli: <span class="token number">4.3</span>.0os: linux <span class="token number">5.4</span>.0-77-generic Ubuntu <span class="token number">20.04</span>.2 LTS <span class="token punctuation">(</span>Focal Fossa<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkdir</span> blog <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> blog<span class="token function">sudo</span> hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果哪里出错了，想重来，直接删除 blog 文件夹即可</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>遇到报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">INFO  Validating configINFO  Start processingFATAL <span class="token punctuation">{</span> err:   TypeError: line.matchAll is not a <span class="token keyword">function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>原因在于 nodejs 版本太低，尝试使用 n 升级 nodejs</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g n<span class="token function">sudo</span> n latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看版本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">node -vv16.4.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成功启动 hexo server，你可以通过 <a href="http://localhost:4000">http://localhost:4000</a> 访问你的本地博客啦！</p><h3 id="写第一篇文章"><a href="#写第一篇文章" class="headerlink" title="写第一篇文章"></a>写第一篇文章</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> hexo new <span class="token string">'Fisrt Blog'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">INFO  Validating configINFO  Created: /home/declan/Documents/blog/source/_posts/First-Blog.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你的文章位置在上面的路径中可以找到，可以通过 markdown 语法进行书写</p><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><p>清理一些缓存，然后生成我们的页面，同样使用 hexo server 从本地查看效果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo cleanhexo generatehexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="布属到远端"><a href="#布属到远端" class="headerlink" title="布属到远端"></a>布属到远端</h2><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p>在 github 新建仓库 name.github.io name一定要是你的 github 用户名</p><p>在 blog 目录下，下载 git deployer</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> cnpm <span class="token function">install</span> --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置-config-yml"><a href="#设置-config-yml" class="headerlink" title="设置 _config.yml"></a>设置 _config.yml</h3><p>在 blog 目录下打开 _config.yml 文件，在文件最后的 # Deployments 上修改</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span>deploy:  type: <span class="token string">'git'</span>  repo: https://github.com/DeclK/declk.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在你的仓库里多了一些文件</p><p>以后你就可以通过你的仓库名 <em>*</em>.github.io 来访问你的博客啦！</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>在寻找了许久过后决定使用 <a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件基础 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vs code 教程</title>
      <link href="/archives/ca50f614.html"/>
      <url>/archives/ca50f614.html</url>
      
        <content type="html"><![CDATA[<h1 id="VS-Code-note"><a href="#VS-Code-note" class="headerlink" title="VS Code note"></a>VS Code note</h1><p>学习视频 <a href="https://www.bilibili.com/video/BV1ty4y1S7mC?p=1">bilibili</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>直接在官网一键下载，宇宙第一开发工具，而且还是免费的<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h3><ol><li><p>vs code 支持更换主题皮肤</p></li><li><p>vs code 支持插件扩展，能够实现多种功能来提高编程效率，如下载不同语言，高亮代码等等</p></li><li><p>通过快捷键 palette 查找文件 Ctrl + P，查找命令 Ctrl + Shift + P</p><p>可以修改一些你常用命令的快捷键，我修改了如下命令：</p><ol><li>Run in python file: Ctrl + enter</li><li>Start debugging: Ctrl + shift +enter</li><li>Close panels: Ctrl + Alt + P</li></ol></li><li><p>设置面板快捷键 Ctrl + ,</p></li><li><p>新建一个文件 Ctrl + N</p></li></ol><h2 id="交互式演练场-Interactive-Playground"><a href="#交互式演练场-Interactive-Playground" class="headerlink" title="交互式演练场 Interactive Playground"></a>交互式演练场 Interactive Playground</h2><p>一些编辑的小技巧</p><ol><li><p>同时选中同名字段 Ctrl + Shift + L，但这个功能没有 Refactoring 智能</p></li><li><p>IntelliSense 自动补全 api 功能 Ctrl + space</p></li><li><p>行操作</p><ol><li>复制行，在没有任何东西选中的时候直接 Ctrl + C</li><li>上下移动行，Alt + 上下键</li><li>删除行 Ctrl + Shift + K</li></ol></li><li><p>Formatting 规范代码，需要自己定义 format</p></li></ol><h2 id="一些推荐的设置"><a href="#一些推荐的设置" class="headerlink" title="一些推荐的设置"></a>一些推荐的设置</h2><p>打开 settings</p><ol><li>在熟悉之后关闭 welcome/startup 界面</li><li>建议使用英文界面</li><li>设置字体 JetBrains Mono，还可以顺便设置一下字号。安装字体<a href="https://blog.csdn.net/HUSTHY/article/details/104023077">教程</a></li><li>设置是否显示缩略图 minimap</li><li><p>设置 restore windows 是否直接恢复上一次的项目</p></li><li><p>设置开启 Trims final newlines 自动消除文件末尾多余的空行</p></li></ol><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>下载 Python 插件</p><h3 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h3><ol><li>在底部的 status bar 添加 python 解释器，也可以使用 palette 来添加 interpreter。会自动检测到电脑上的 python interpreter (包括 anaconda 中创建的环境)</li><li>建立 debug 环境 craete a launch.json file，直接使用默认值就好，详细说明在 <a href="https://zhuanlan.zhihu.com/p/142642410">知乎链接</a></li><li>Jupyter notebook 是插件里自带的功能，直接打开 ipynb 文件就可以运行代码块！通过选择 notebook 中的 kernel (具体一点说就是选择 conda 中的环境) 就能在你想要的环境中运行了，非常方便</li><li>可以通过快捷键 o 来折叠输出</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件基础 </category>
          
          <category> vs code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vs code </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CenterPoint 复现笔记</title>
      <link href="/archives/ba7995ee.html"/>
      <url>/archives/ba7995ee.html</url>
      
        <content type="html"><![CDATA[<h1 id="CenterPoint-复现笔记"><a href="#CenterPoint-复现笔记" class="headerlink" title="CenterPoint 复现笔记"></a>CenterPoint 复现笔记</h1><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol><li><p>pytorch下载如果使用镜像需要去掉参数 -c pytorch，采用北外的镜像速度快</p></li><li><p>下载cmake使用apt，但要更新下载源为阿里云，这样版本才够新</p></li><li><p>安装spconv时报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">The following packages have unmet dependencies: gsettings-desktop-schemas <span class="token builtin class-name">:</span> Breaks: mutter <span class="token punctuation">(</span><span class="token operator">&lt;</span> <span class="token number">3.31</span>.4<span class="token punctuation">)</span> but <span class="token number">3.28</span>.4+git20200505-0ubuntu18.04.2 is to be installedE: Error, pkgProblemResolver::Resolve generated breaks, this may be caused by held packages.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>网络上一个解决方案是使用aptitude</p><pre class="line-numbers language-SHell" data-language="SHell"><code class="language-SHell"># download aptitudesudo apt install aptitudesudo aptitude install &lt;packagename&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>血泪教训，不要轻易使用aptitude，系统很多东西都被改写了，经过一番折腾升级到了ubuntu 20.04，也不知道之前安装的东西有没有被动</p><p>印象中提到”held packages”，应该按照那种方式解决</p></li><li><p>在下载spconv报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">CMake Error at CMakeLists.txt:2 <span class="token punctuation">(</span>project<span class="token punctuation">)</span>:  No CMAKE_CUDA_COMPILER could be found.  raise CalledProcessError<span class="token punctuation">(</span>retcode, cmd<span class="token punctuation">)</span>subprocess.CalledProcessError: Command <span class="token string">'['</span>cmake<span class="token string">', '</span>/home/declan/CenterPoint/spconv<span class="token string">', '</span>-DCMAKE_PREFIX_PATH<span class="token operator">=</span>/home/declan/anaconda3/envs/centerpoint/lib/python3.6/site-packages/torch<span class="token string">', '</span>-DPYBIND11_PYTHON_VERSION<span class="token operator">=</span><span class="token number">3.6</span><span class="token string">', '</span>-DSPCONV_BuildTests<span class="token operator">=</span>OFF<span class="token string">', '</span>-DCMAKE_CUDA_FLAGS<span class="token operator">=</span><span class="token string">"--expt-relaxed-constexpr"</span><span class="token string">', '</span>-DCMAKE_LIBRARY_OUTPUT_DIRECTORY<span class="token operator">=</span>/home/declan/CenterPoint/spconv/build/lib.linux-x86_64-3.6/spconv<span class="token string">', '</span>-DCMAKE_BUILD_TYPE<span class="token operator">=</span>Release<span class="token string">']'</span> returned non-zero <span class="token builtin class-name">exit</span> status <span class="token number">1</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试设置 CUDA 路径</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYTHONPATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${PYTHONPATH}</span>:/home/declan/CenterPoint"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/cuda-10.0/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CUDA_PATH</span><span class="token operator">=</span>/usr/local/cuda-10.0<span class="token builtin class-name">export</span> <span class="token assign-left variable">CUDA_HOME</span><span class="token operator">=</span>/usr/local/cuda-10.0<span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>/usr/local/cuda-10.0/lib64:<span class="token variable">$LD_LIBRARY_PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有效果</p><h1 id="241-issues和我问题一模一样-https-github-com-traveller59-spconv-issues-241"><a href="#241-issues和我问题一模一样-https-github-com-traveller59-spconv-issues-241" class="headerlink" title="241 issues和我问题一模一样 https://github.com/traveller59/spconv/issues/241"></a>241 issues和我问题一模一样 <a href="https://github.com/traveller59/spconv/issues/241">https://github.com/traveller59/spconv/issues/241</a></h1><p>尝试增加路径 </p><p>try adding ‘-DCMAKE_CUDA_COMPILER=/usr/local/cuda-10.1/bin/nvcc’ in cmake_args</p><p>依旧失败</p><p>尝试使用不同版本的g++ sudo apt install g++-7，显示已经下载，我们需要切换版本</p><p>ls name* 可以列出所有name开头的包</p><p><a href="https://blog.csdn.net/FontThrone/article/details/104279224">https://blog.csdn.net/FontThrone/article/details/104279224</a></p><p>—slave 使得g++ gcc版本保持一致 70 90为重要权重priority</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 <span class="token number">70</span> --slave /usr/bin/g++ g++ /usr/bin/g++-7<span class="token function">sudo</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 <span class="token number">90</span> --slave /usr/bin/g++ g++ /usr/bin/g++-9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对g++和gcc进行管理</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">  Selection    Path            Priority   Status------------------------------------------------------------* <span class="token number">0</span>            /usr/bin/gcc-9   <span class="token number">90</span>        auto mode  <span class="token number">1</span>            /usr/bin/gcc-7   <span class="token number">70</span>        manual mode  <span class="token number">2</span>            /usr/bin/gcc-9   <span class="token number">90</span>        manual mode<span class="token function">sudo</span> update-alternatives --config gcc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功</p></li></ol><ol><li><p>选择了 nuScenes mini 数据集</p></li><li><p>运行测试</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python ./tools/dist_test.py infos_val_10sweeps_withvelo_filter_True.json  --work_dir work_dirs/CONFIG_NAME --checkpoint work_dirs/CONFIG_NAME/latest.pth --speed_test <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ModuleNotFoundError: No module named <span class="token string">'torchie'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尝试将torchie文档直接加入到PYTHONPATH当中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYTHONPATH</span><span class="token operator">=</span><span class="token variable">$PYTHONPATH</span>:/home/delcan/CenterPoint/det3d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:  File <span class="token string">"./tools/dist_test.py"</span>, line <span class="token number">211</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"./tools/dist_test.py"</span>, line <span class="token number">102</span>, <span class="token keyword">in</span> main    logger <span class="token operator">=</span> get_root_logger<span class="token punctuation">(</span>cfg.log_level<span class="token punctuation">)</span>  File <span class="token string">"/home/declan/CenterPoint/det3d/torchie/utils/config.py"</span>, line <span class="token number">146</span>, <span class="token keyword">in</span> __getattr__    <span class="token builtin class-name">return</span> getattr<span class="token punctuation">(</span>self._cfg_dict, name<span class="token punctuation">)</span>  File <span class="token string">"/home/declan/CenterPoint/det3d/torchie/utils/config.py"</span>, line <span class="token number">29</span>, <span class="token keyword">in</span> __getattr__    raise exAttributeError: <span class="token string">'ConfigDict'</span> object has no attribute <span class="token string">'log_level'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能是因为 nuscenes_mini 测试集原因</p><p><a href="https://github.com/tianweiy/CenterPoint/issues/106">https://github.com/tianweiy/CenterPoint/issues/106</a></p><p>我根据上面的内容对源码进行了修改，先尝试 train 一下</p><p>依旧报错，再检查可能是因为配置文件没有对的原因</p><p><a href="https://github.com/open-mmlab/mmdetection/issues/3093">https://github.com/open-mmlab/mmdetection/issues/3093</a></p><p>通过正确配置 nusc_centerpoint_voxelnet_0075voxel_fix_bn_z.py 文件解决上面报错</p><p>./configs/nusc/voxelnet/nusc_centerpoint_voxelnet_0075voxel_fix_bn_z.py</p></li></ol><p>   由于没有完整的 nuScenes 数据集，又有新的错误报错</p>   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FileNotFoundError: <span class="token punctuation">[</span>Errno <span class="token number">2</span><span class="token punctuation">]</span> No such <span class="token function">file</span> or directory: <span class="token string">'nuScenes/samples/LIDAR_TOP/n008-2018-08-27-11-48-51-0400__LIDAR_TOP__1535385105950634.pcd.bin'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   跳过这里，尝试跑一个 demo</p><ol><li><p>```<br>python ./tools/dist_test.py ./configs/nusc/voxelnet/nusc_centerpoint_voxelnet_0075voxel_fix_bn_z.py —work_dir work_dirs/nusc_centerpoint_voxelnet_0075voxel_fix_bn_z —checkpoint work_dirs/nusc_centerpoint_voxelnet_0075voxel_fix_bn_z/latest.pth —speed_test </p><pre class="line-numbers language-none"><code class="language-none">上面的报错```shellFileNotFoundError: [Errno 2] No such file or directory: 'nuScenes/samples/LIDAR_TOP/n015-2018-10-02-10-50-40+0800__LIDAR_TOP__1538448754047572.pcd.bin'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查找目录发现这个文件其实是存在的，说明路径没有对，在 CentePoint 目录下添加 nuScenes 的软链接就可以解决了</p></li><li><p>最终 RuntimeError: CUDA out of memory 即使 batch_size = 1 也直接炸了，放弃！</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> papers </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CenterPoint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器部署hexo博客教程</title>
      <link href="/archives/d547a647.html"/>
      <url>/archives/d547a647.html</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云服务器ECS"><a href="#阿里云服务器ECS" class="headerlink" title="阿里云服务器ECS"></a>阿里云服务器ECS</h1><p>参考链接：</p><p><a href="https://www.bilibili.com/video/BV177411K7bH">狂神说_bilibili</a></p><p>官方链接：</p><p><a href="https://developer.aliyun.com/plan/grow-up">阿里云开发者成长计划</a></p><p><a href="https://developer.aliyun.com/adc/student?spm=a2c6h.19776329.J_4403085560.4.658b3d804yW1UU#J_3120529270">ECS训练营</a></p><p><a href="https://www.aliyun.com/product/ecs?spm=5176.224200.J_8058803260.52.1401586cYUB7hI">云服务器ECS</a></p><h2 id="学生机"><a href="#学生机" class="headerlink" title="学生机"></a>学生机</h2><p>如果是学生/新用户，一定要去看看有哪些优惠，比如<a href="https://developer.aliyun.com/plan/grow-up">阿里云开发者成长计划</a>。此刻阿里云提供的学生优惠是免费使用2个月的服务器资源。如果购买的话，一个1核2G的服务器就足够了</p><p><img src="/archives/d547a647/image-20210717163630430-1627213118656.png" style="zoom: 25%;"></p><h2 id="设置安全组"><a href="#设置安全组" class="headerlink" title="设置安全组"></a>设置安全组</h2><p>进入控制台开启端口，否则外部无法访问。除了默认的三个端口，通过“快速添加”，我再添加了 http(80) &amp; https(443) 两个端口。由于现在我对计算机网络一窍不通，所以先就这样吧</p><p><img src="/archives/d547a647/image-20210717155930905-1627213118658.png" style="zoom: 33%;"></p><h2 id="重置实例密码"><a href="#重置实例密码" class="headerlink" title="重置实例密码"></a>重置实例密码</h2><p>修改密码之后实例就会自动重启</p><p>然后就可以通过 <code>ssh root@ip</code> 连接到服务器，其中 ip 是你服务器的公网 ip</p><p><img src="/archives/d547a647/image-20210717162311907-1627213118658.png" style="zoom: 33%;"></p><h2 id="Enjoy"><a href="#Enjoy" class="headerlink" title="Enjoy"></a>Enjoy</h2><p>之后就可以像操作 Linux 一样，操作自己的服务器啦！</p><h2 id="将博客部署到服务器上"><a href="#将博客部署到服务器上" class="headerlink" title="将博客部署到服务器上"></a>将博客部署到服务器上</h2><p>几个参考教程：<a href="https://developer.aliyun.com/article/775005">阿里云教程</a> <a href="https://blog.csdn.net/weixin_41154636/article/details/99685965">csdn 教程</a> <a href="https://cloud.tencent.com/developer/article/1632020">腾讯云教程</a> <a href="https://zhuanlan.zhihu.com/p/120743882">知乎教程</a></p><p>在开始之前，先根据之前的 Linux 安装教程简单设置一下自己的服务器：添加新用户，更改主机名</p><p>现在本地配置好 hexo 环境，具体配置过程在之前的博客有详细记录</p><h3 id="在服务器上安装-git"><a href="#在服务器上安装-git" class="headerlink" title="在服务器上安装 git"></a>在服务器上安装 git</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum <span class="token function">install</span> -y <span class="token function">git</span><span class="token comment"># 安装成功后查看 git version</span><span class="token function">git</span> --version <span class="token function">git</span> version <span class="token number">2.27</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为之前在 Ubuntu 上使用的是 apt 包管理，在 CentOS 上则换为 yum 包管理。我试验了一下，如果不加 sudo 是不能下载成功的</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Error: This <span class="token builtin class-name">command</span> has to be run under the root user.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以我认为 yum 和 apt 一样需要 sudo 权限</p><h3 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h3><p>什么是 nginx？下面是官网描述</p><blockquote><p>NGINX is a high‑performance, highly scalable, highly available web server, reverse proxy server, and web accelerator (combining the features of an HTTP load balancer, content cache, and more).</p></blockquote><p>在我理解看来，部署网站的过程中 nginx 就是用来提供网页服务的服务器。这里就要更进一步理解什么是广义上的服务器</p><blockquote><p>从广义上讲，服务器是指网络中能对其它机器提供某些服务的计算机系统。从狭义上讲，服务器是专指某些高性能计算机，能通过网络，对外提供服务。</p></blockquote><p>使用以下命令安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum <span class="token function">install</span> -y nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="建立-git-仓库"><a href="#建立-git-仓库" class="headerlink" title="建立 git 仓库"></a>建立 git 仓库</h3><p>Hexo 可以使用 git 来部署，这样每次写完之后就都可以使用git来一键部署了，比较方便。我们先为系统添加一个 git 用户</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">useradd</span> -m <span class="token function">git</span> <span class="token comment"># 添加一个新用户</span><span class="token function">passwd</span> <span class="token function">git</span> <span class="token comment"># 设置git用户密码</span><span class="token function">su</span> <span class="token function">git</span> <span class="token comment"># 切换用户进行后续操作</span><span class="token builtin class-name">cd</span> /home/git/<span class="token function">mkdir</span> -p projects/blog <span class="token comment"># 把项目目录建立起来</span><span class="token function">mkdir</span> repos <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> repos<span class="token function">git</span> init --bare blog.git <span class="token comment"># 创建仓库</span><span class="token builtin class-name">cd</span> blog.git/hooks<span class="token function">vim</span> post-receive <span class="token comment"># 创建一个钩子</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>post-receive文件的内容如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/sh</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/home/git/projects/blog --git-dir<span class="token operator">=</span>/home/git/repos/blog.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>给 post-receive 添加执行权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">chmod</span> +x post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git init —bare 和 git init 有什么区别？ <a href="https://blog.csdn.net/sinat_34349564/article/details/52487860">csdn 链接</a></p><p>hooks有什么作用？ <a href="https://blog.csdn.net/weixin_41154636/article/details/99685965">csdn 链接</a></p><p>该钩子的意思是当本地有提交到服务器时，会将文件放在/home/hexo下</p><p><code>-f</code>这个参数如果在多人协作的博客中可能会引发不好的结果，因为他是强制更新的意思，会将本地版本覆盖掉远程服务器的版本，但是是个人的博客系统就无所谓了</p><h3 id="将公钥配置到服务器上"><a href="#将公钥配置到服务器上" class="headerlink" title="将公钥配置到服务器上"></a>将公钥配置到服务器上</h3><p>可以通过建立SSH信任关系，来免去登陆服务器时输入密码的步骤</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh-copy-id -i ~/.ssh/id_rsa.pub git@server_ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我尝试了一下自己手动复制 id_rsa.pub 到 authorized_keys 文件中，但是不能实现免密登陆，可能时复制时的字符串出现了问题，之前在 github 时也遇到了类似问题，直接复制公钥无法识别的情况</p><h3 id="更改-git-用户默认-shell"><a href="#更改-git-用户默认-shell" class="headerlink" title="更改 git 用户默认 shell"></a>更改 git 用户默认 shell</h3><p>为了安全，我们最好禁用 git 用户的 shell 登录权限。从而只能用 git clone，git push 等 git 操作访问服务器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">cat</span> /etc/shells <span class="token comment"># 查看 git-shell 是否在登录方式里面</span><span class="token function">which</span> git-shell <span class="token comment"># 找到git-shell的路径，记下来</span><span class="token function">sudo</span> <span class="token function">vim</span> /etc/shells <span class="token comment"># 把 git-shell 路径添加到文件末尾</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后更改 git 用户 shell</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/passwd<span class="token comment"># 将原来的 /bin/bash 改为 /usr/bin/git-shell</span><span class="token comment"># git:x:1001:1001::/home/git:/usr/bin/git-shell</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 这样当你再次用 ssh 连接 git 用户时就会出现以下信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">fatal: Interactive <span class="token function">git</span> shell is not enabled.hint: ~/git-shell-commands should exist and have <span class="token builtin class-name">read</span> and execute access.Connection to your_ip closed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="部署上线"><a href="#部署上线" class="headerlink" title="部署上线"></a>部署上线</h3><p>我们修改<strong>本地</strong> hexo 配置文件 _config.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@your_ip<span class="token punctuation">:</span>/home/git/repos/blog.git<span class="token comment"># repo: git@github.com:name/name.github.io.git</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置好后就是 hexo 三连一键部署：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /etc/nginx<span class="token function">cp</span> nginx.conf nginx_backup.conf <span class="token comment"># 备份配置文件</span><span class="token function">vim</span> nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有两个需要修改的地方：</p><ol><li><p>开头的 <code>user nginx</code> 要改为 <code>user root</code> </p></li><li><p>server 部分</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span> <span class="token comment">#监听80端口</span>        <span class="token directive"><span class="token keyword">server_name</span> 139.159.245.212</span><span class="token punctuation">;</span> <span class="token comment">#你的服务器名，通常是域名，如果是域名，你就需要监听80端口</span>        <span class="token directive"><span class="token keyword">root</span>       /home/git/projects/blog</span><span class="token punctuation">;</span> <span class="token comment">#网站的根目录</span>        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>配置好后 <code>nginx -s reload</code> 重新加载配置信息，如果是第一次进行加载，则还需要先运行命令 <code>nginx -c /etc/nginx/nginx.conf</code></p><p>现在你就可以通过 ip 地址访问你的网页啦！</p><p>我发现由于我的网站封面太大(有6M)，打开时加载比较慢。所以我需要压缩一下封面图片的大小，推荐两个压缩图片网站</p><p><a href="https://compressjpeg.com/">https://compressjpeg.com/</a></p><p><a href="https://tinypng.com/">https://tinypng.com/</a></p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>什么是域名？参考链接：<a href="https://www.bilibili.com/video/BV1kE411i7Jo?from=search&amp;seid=2556702162224412196">CodeSheep bilibili</a></p><p>建议阅读官方文档：<a href="https://help.aliyun.com/product/35473.html?spm=a2c4g.11186623.6.540.5b09689epNroGg">阿里云域名服务</a> <a href="https://help.aliyun.com/document_detail/61257.html?spm=a2c4g.11174283.2.6.36904c070bCdBM">什么是阿里云域名服务</a></p><p>根据官方文档 <a href="https://help.aliyun.com/document_detail/54068.htm?spm=a2c4g.11186623.2.13.5ff0689efHL52u#task-1830383">注册通用域名</a>，花费79元巨资注册了3年域名 hongkun.space</p><p><img src="/archives/d547a647/image-20210717235130445-1627213118658.png" style="zoom:50%;"></p><p>完成购买过后还需要进行：</p><ol><li><a href="https://help.aliyun.com/document_detail/35881.htm?spm=a2c4g.11186623.2.14.275a689e1pnnCW#concept-uhk-w5v-12b">实名认证</a>：一般3天左右审核通过</li><li><a href="https://beian.aliyun.com/pcContainer/formpage?page=selfBa&amp;pageAction=init&amp;orderType=100">域名备案</a>：初审1-2天，完整备案审核过程大概十多天</li></ol><p>注意需要先进行实名认证，然后才能完成备案</p><p>这里我还遇到一个问题，我通过学生优惠免费领取的服务器不能进行域名备案，因为至少需要有3个月的服务器使用权才能备案。看来还是得自己购买一个服务器，我再次花费巨资96元（新用户优惠）购买了一年的轻量应用服务器</p><h3 id="轻量应用服务器"><a href="#轻量应用服务器" class="headerlink" title="轻量应用服务器"></a>轻量应用服务器</h3><p><a href="https://www.aliyun.com/product/swas?spm=5176.8789780.J_8058803260.52.578945b5xsNx3V">轻量应用服务器</a>有单独的<a href="https://account.aliyun.com/login/login.htm?spm=5176.161059.J_5253785160.3.2c9ea505nvWZQs&amp;oauth_callback=https%3A%2F%2Fswas.console.aliyun.com%2F%3Fspm%3D5176.161059.J_835498.2.3e9f7fdaKmYuj7&amp;lang=zh#/servers">控制台</a>，用来部署网站性价比非常不错，配置过程和上面的云服务器一样</p><p>在轻量应用服务器的控制台中，域名解析和备案就在概览页面当中，根据流程进行即可</p><p><img src="/archives/d547a647/image-20210725173426850.png" style="zoom: 33%;"></p><h2 id="部署-SSL-证书-https"><a href="#部署-SSL-证书-https" class="headerlink" title="部署 SSL 证书 (https)"></a>部署 SSL 证书 (https)</h2><p>网站现在可以访问了，但是如下图可见，登陆网站会提示 <strong>Not Secure!!!</strong></p><p><img src="/archives/d547a647/image-20210802105224250.png" alt="image-20210802105224250" style="zoom: 50%;"></p><p>这可不能忍，于是我根据 <a href="https://blog.csdn.net/qq_33505555/article/details/106046616">CSDN 教程</a> 给阿里云服务器配置 SSL 证书，使用的是 FreeSSL 一个提供免费 https 证书申请的网站</p><h3 id="使用-FreeSSL-申请证书"><a href="#使用-FreeSSL-申请证书" class="headerlink" title="使用 FreeSSL 申请证书"></a>使用 FreeSSL 申请证书</h3><p>老规矩，先看看 <a href="https://blog.freessl.cn/tag/ssl-apply/">官网教程</a></p><ol><li><p>生成 CSR <a href="https://cloud.tencent.com/document/product/400/5367">什么是 CSR ? 腾讯云文档</a></p><p>教程中推荐使用 Keymanager 生成</p></li><li><p>在阿里云服务器中配置 DNS 解析，并对配置进行检测和验证</p><p>验证成功后可以在 FreeSSL 控制台中查看证书</p><p><img src="/archives/d547a647/image-20210802141326078.png" style="zoom:33%;"></p><p>在“更多操作”中可以下载证书，一个 pem 文件，一个 private.key</p><p><img src="/archives/d547a647/image-20210802141919162.png" style="zoom:33%;"></p></li><li><p>然后将证书 .pem 文件导入到 keymanager 中</p><p><img src="/archives/d547a647/image-20210802170924734.png" style="zoom: 25%;"></p></li><li><p>进行一键部署。基于你自己的框架，选择不同的部署方法，我选择部署到 Nginx 上。这里的“一键部署”实质上就是上传你的证书到服务器上</p><p><img src="/archives/d547a647/image-20210802171457165.png" style="zoom: 33%;"></p><p>部署成功过后，使用 <a href="https://myssl.com/">myssl.com </a> 检查网站的安全性。但是如果你的 Nginx 配置不对的话，</p></li><li><p>配置 Nginx</p><p>现在我们希望通过 https 443 端口来打开网站，与之前监听 http 80 端口，我们监听 443 端口，然后将 80 端口重定向</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>      <span class="token comment">#listen 80;</span>      <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span></span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">ssl</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">ssl_certificate</span> /etc/ssl/cert.pem</span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">ssl_certificate_key</span> /etc/ssl/key.pem</span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">server_name</span>  hongkun.space</span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">root</span>         /home/git/blog</span><span class="token punctuation">;</span>  ...  <span class="token punctuation">}</span>  <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>      <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">server_name</span> hongkun.space      <span class="token comment"># permenant redirect to https</span>      return <span class="token number">301</span> https://hongkun.space<span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置好过后重启 <code>nginx -s reload</code></p></li><li><p>现在访问网站，旁边就有高贵的🔓</p><p><img src="/archives/d547a647/image-20210802173016910.png" style="zoom:50%;"></p><p>部署成功过后，还可以使用 <a href="https://myssl.com/">myssl.com </a> 检查网站的安全性</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件基础 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n assignment2 笔记</title>
      <link href="/archives/407bb789.html"/>
      <url>/archives/407bb789.html</url>
      
        <content type="html"><![CDATA[<h1 id="cs231n-2021-Assignment-2-note"><a href="#cs231n-2021-Assignment-2-note" class="headerlink" title="cs231n 2021 Assignment 2 note"></a>cs231n 2021 Assignment 2 note</h1><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>assignment 模板: <a href="https://github.com/cs231n/cs231n.github.io">github</a> </p><p>官方: <a href="https://cs231n.github.io/assignments2021/assignment2/">课程链接</a></p><p>assignment 参考链接: <a href="https://github.com/amanchadha/stanford-cs231n-assignments-2020">2020</a></p><p>发现了一种新的模式: pycharm + git + anaconda &amp; jupyter</p><p>上面的组合能够帮助写代码的效率提升，pycharm 能够帮助调试，git 用于版本管理，conda 用于环境管理。jupyter 在测试代码块上有很大的优势，并且很多 cs231n 的作业形式都是以 ipynb 的文件类型发布，更适合在 jupyter 上打开，而且 jupyter 能够直接使用创建好的 conda 环境，特别方便</p><p>经过一番折腾，最终决定使用 vs code 替换 pycharm，原因是 vs code 有 jupyter notebook 插件，可以直接显示在 editor 内，比 Pycharm 更方便而且以后想要学习其他语言 vs code 优势更大</p><h2 id="过程中的编程复习"><a href="#过程中的编程复习" class="headerlink" title="过程中的编程复习"></a>过程中的编程复习</h2><ol><li><p>重新复习了 numpy 的一些用法，一个重要思想就是尽量少考虑使用循环解决，要以 index 索引思想来解决数据的操作问题。</p><p>reshape已经存在的shape</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当接受参数是元组而是可变参数 <em>args 的时候，可以用 </em>tuple 来将参数变为 *args</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要学会善用矩阵点乘 A * B，是将对应元素相乘，在计算模的时候，或者当其中一个是 indication function 时很有用</p></li><li><p>重新复习了字典的用法，核心是创造字典，dict(), dict.fromkeys()</p><p>字典的 key, val 迭代器，如果不用 items，则只有 key</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>pas<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>对于格式化字符串有新的认知，下面例子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> weight_scale <span class="token operator">*</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以用这样的形式来调用 key</p></li></ol><h2 id="Fully-Connected-Networks"><a href="#Fully-Connected-Networks" class="headerlink" title="Fully Connected Networks"></a>Fully Connected Networks</h2><ol><li>对于网络的认知有了更新。要把层(layer, w)和点(node, x)分开来看，这样网络结构才更清晰。一般隐藏层不包含输出层</li><li><strong>反向传播熟悉 back propagation，尤其是矩阵相乘的反向传播，只需要记住结论就行了。对于广播过后的结果，需要将广播的矩阵作 sum 处理，得到广播前的对应元素梯度</strong></li><li>5 layers 和 3 layers 网络优化时比较，差异在哪里？5 layer 更难优化，对于初始值敏感</li><li><strong>对于优化算法进行了进一步了解，由三个核心点：AdaGrad, Momentum, EWA 最后自然推出 Adam 优化算法</strong></li><li><strong>在编写代码的时候重要的版本需要保存，这就需要使用 git</strong></li></ol><h2 id="Batch-normalization"><a href="#Batch-normalization" class="headerlink" title="Batch normalization"></a>Batch normalization</h2><p>进一步清晰了 bn 的过程与作用，可以回看自己的笔记了解详情</p><h3 id="Inline-Question-1"><a href="#Inline-Question-1" class="headerlink" title="Inline Question 1"></a>Inline Question 1</h3><p><strong>How does the scale of weight initialization affect models with/without batch normalization differently, and why?</strong></p><p>You should find that using batch normalization helps the network to converge much faster. </p><p>使用 batch normalization 会让网络在训练集上收敛更快。这和普通的 normalization 是一个道理，减少 zigzag 拐弯</p><p>还有几个需要知道和理解的点是：</p><ol><li>batch normalization 帮助缓解梯度消失/爆炸的问题，这将减缓因为 weight initialization 过大或过小而产生梯度消失/爆炸的问题</li><li>batch normalization 有一定的正则化效果，避免过拟合</li></ol><p><img src="/archives/407bb789/image-20210707160726541.png" style="zoom: 67%;"></p><h3 id="Inline-Question-2"><a href="#Inline-Question-2" class="headerlink" title="Inline Question 2"></a>Inline Question 2</h3><p><strong>hat does this imply about the relationship between batch normalization and batch size? Why is this relationship observed?</strong></p><p>一般规律是：batch size 越大训练集上收敛越快。当 batch size 比较小的时候，比 baseline 速度更慢，原因在于过少的样本带来的偏差太大，这样的噪音会影响训练和测试表现</p><p><img src="/archives/407bb789/image-20210707164225500.png" style="zoom: 67%;"></p><p>在训练和测试时均会用到 bn layer，测试时用的 $\mu,\sigma$  参数是训练过程中的指数加权平均 EWA</p><h3 id="Layer-Normalization"><a href="#Layer-Normalization" class="headerlink" title="Layer Normalization"></a>Layer Normalization</h3><p>用在 RNN 中更多，如果以后接触 NLP 领域的话再深入整理。简单的解释 <a href="https://zhuanlan.zhihu.com/p/74516930">知乎链接</a> </p><p>假设我们有 10行 3列 的数据，即我们的batchsize = 10，每一行数据有三个特征，这是一种“列缩放”。</p><p>而layer方向相反，它针对的是每一行进行缩放。即只看一笔数据，算出这笔所有特征的均值与方差再缩放。这是一种“行缩放”。</p><p>Q: 为什么 gamma 和 beta 还是原来的 (D, ) 形状？Layer normalization 在 RNN 中有什么作用？</p><p><img src="/archives/407bb789/image-20210707200112133.png" style="zoom: 67%;"></p><p>看得出 layer normalization 在训练上也是有一定作用的，但在图像方面相比于 batch normalization 效果差一点，另一个比较自然的结果是，对于 layer normalization 来说 hidden dimension 取较大值较好</p><h2 id="Drop-out"><a href="#Drop-out" class="headerlink" title="Drop out"></a>Drop out</h2><p>两行代码解决 (inverted) dropout layer 核心</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mask <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">input</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">&lt;</span> poutput <span class="token operator">=</span> <span class="token builtin">input</span> <span class="token operator">*</span> mask <span class="token operator">/</span> p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>vallina dropout 是在 test 时将输出乘以 p 使得输出是一个合理期望值。但如果我们在训练的时候已经除以 p 了，在测试时就不需要作任何操作。下图为正则化效果 regularization</p><p><img src="/archives/407bb789/image-20210708160433242.png" style="zoom:67%;"></p><h2 id="Convolutional-Neural-Networks"><a href="#Convolutional-Neural-Networks" class="headerlink" title="Convolutional Neural Networks"></a>Convolutional Neural Networks</h2><ol><li><p>用嵌套循环实现了最原始的卷积操作，使用 np.pad 函数能实现 padding 操作，感觉这个函数的参数不是那么灵活</p></li><li><p>返回最大值坐标 np.argmax，如果想要返回多元坐标还需要使用 np.unravel_index 转化</p><p><code>np.unravel(indices, shape)</code></p></li><li><p>assignment 提供了 fast_layers.py 来实现快速卷积操作，比我自己写的循环代码要快 1000 多倍，使用了 im2col 技巧以及 Cpython extension</p></li><li><p>为什么在正则化的时候正则项中不包括偏差 b? 个人理解认为 b 对于正则化的贡献并不大，而 w 参数则占据了绝大部分的参数。</p></li></ol><h3 id="Spatial-Batch-Normalization"><a href="#Spatial-Batch-Normalization" class="headerlink" title="Spatial Batch Normalization"></a>Spatial Batch Normalization</h3><p>这是卷积神经网络特有的 batch normalization。之前使用的 batch normalization 面对的是 (N, D) 形状的数据，但卷积过后得到的输出是类似 (N, C, H, W) 这样的多维数据。那我们应该怎样去计算这一批数据的统计量 $\mu, \sigma$ 呢？</p><p>如果沿着之前的思维，我们只沿着样本数据轴 N 去计算 $\mu, \sigma$ </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># data.shape = (N, C, H, W)</span>mean <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>data<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>var  <span class="token operator">=</span> np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>data<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这将会得到 (C, H, W) 形状的统计量，其中每一个值 (c, h, w)，其样本来自于 N 个像素点（同一 channel，同一位置）。但我们希望样本的数量更广泛一些，具体一点来说，我们希望样本来自于 N 个 feature map (H, W)，用 numpy 表示为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># data.shape = (N, C, H, W)</span>mean <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>data<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>var <span class="token operator">=</span> np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>data<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这将会得到 (C,) 形状的统计量，即：得到了对于某一个 channel 的统计量，这是合理的，因为同一个 channel 我们使用的是同一个 kernel。这样我们不仅得到了更广泛样本的统计量，还减少了参数数量</p><p>如果要使用之前写的 batch_norm 函数的话可以将数据转化为 (N <em> H </em> W, C) ，在 numpy 中使用 transpose + reshape 就可以完成</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> C<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Spatial-Group-Normalization"><a href="#Spatial-Group-Normalization" class="headerlink" title="Spatial Group Normalization"></a>Spatial Group Normalization</h3><p>一张图展示Batch Norm， Layer Norm ，Group Norm的区别</p><p><img src="/archives/407bb789/image-20210710193505933.png" alt="image-20210710193505933"></p><p>Group Norm可以理解为在layer Norm的基础上，输入维度为 (N, C, H, W)，对C进行分组，即 (N, G, C//G, H, W)。为了完成这一部分，重新思考了如何基于系统计算 back propagation</p><p><strong>可以以重要的中间变量为节点，根据计算图逐步推导梯度。难点在于有矩阵参与的计算，经常伴随着矩阵形状的改变，在进行 back propagation 中一定要让梯度跟着这些计算进行升维和降维，可以想象为梯度会随着这些节点形状的变化进行复杂的流动，有分流(例如降维度)，也有汇合(例如 broadcast)</strong></p><p>例如，在 forward pass 中 broadcast 会将矩阵升维，sum 会将矩阵降维，如果在 backward pass 中遇到 broadcast 操作时，则需要将 upper_grad 根据对应维度求和，举个例子，如果我们要求下面 X 的梯度的话，代码应该时这样的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># input: X, X.shape = (N, D)</span><span class="token comment"># f(X) = X - np.mean(X)</span><span class="token comment"># upper_grad = dout, dout.shape = (N, D)</span>dmean <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># sum broadcast dimension</span>dmean <span class="token operator">=</span> dmean <span class="token operator">/</span> N<span class="token comment"># mean operation back prop</span>dX <span class="token operator">=</span> dout <span class="token operator">-</span> dmean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想不使用计算图直接按照一般的矩阵梯度计算，遇到对矩阵/向量求导时，就会出现张量，也就是说维度会增加，需要熟悉张量的运算及其思维。还是借用上面的例子，但我们把平均值作为 (N, D) 形状来看待</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># input: X, X.shape = (N, D)</span><span class="token comment"># f(X) = X - np.mean(X) * np.ones(X.shape)</span><span class="token comment"># upper_grad = dout, dout.shape = (N, D)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script type="math/tex; mode=display">\frac{\partial{loss}}{\partial{f(x)}} = dout，\ f(x)=x-\mu\\\frac{\partial{f(x)}}{\partial{\mu}} = a\ ((N\times D) \times (N\times D))\ shape\ tensor\\\frac{\partial{loss}}{\partial{\mu}}=\frac{\partial{loss}}{\partial{f(x)}} ·\frac{\partial{f(x)}}{\partial{\mu}}=dout\\\frac{\partial{\mu}}{\partial{x}} = a\ ((N\times D) \times (N\times D))\ shape\ tensor\\\frac{\partial{loss}}{\partial{x}}=\frac{\partial{loss}}{\partial{f(x)}}·\frac{\partial{f(x)}}{\partial{x}} - \frac{\partial{loss}}{\partial{f(x)}}·\frac{\partial{f(x)}}{\partial{\mu}}·\frac{\partial{\mu}}{\partial{x}}=dout -dout·\frac{\partial{\mu}}{\partial{x}}</script><p>这将是一种普适的方法，更加抽象化，能够处理任何的矩阵求导，但不推荐实际中使用。</p><p>不论使用哪种方法，最核心的还是要理解梯度流动的本质——某一个变量的变动能够引起输出多少变动</p><h2 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h2><h3 id="Fully-Connected-Layer"><a href="#Fully-Connected-Layer" class="headerlink" title="Fully Connected Layer"></a>Fully Connected Layer</h3><p>现在卡在了 solver 上</p><p>不能得到 overfitting 的结果</p><ol><li><p>尝试更换 solver 看能否得到不一样的结果</p><p>失败了</p></li><li><p>尝试使用2016的所有答案，看是否是自己的代码出问题了</p><p>失败了</p><p>小技巧 Ctrl+r 能够更换 pycharm 相同字段</p></li><li><p>尝试更改 colab 本身的文件，使用2016年的colab文件</p><p>成功，原因在于 learning rate 太小了，不能找到全局最优</p></li></ol><h3 id="Batch-normalization-1"><a href="#Batch-normalization-1" class="headerlink" title="Batch normalization"></a>Batch normalization</h3><ol><li><p>卡在了计算 back prop 上</p><p>最后出现的失误还是在于每一个公式必须要精确才行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">norm_x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> sample_mean<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>sample_var <span class="token operator">+</span> eps<span class="token punctuation">)</span>norm_x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> sample_mean<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>sample_var<span class="token punctuation">)</span> <span class="token operator">+</span> eps<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面两个式子虽然在计算结果上相差不多，但是在网络的计算中，一点点的误差传播过后会变得越来越大</p></li><li><p>尝试使用 jupyter 进行编程，遇到问题：The kernel appears to have died. It will restart automatically</p><p>以为是 jupyter 的问题，但测试了不同的软件都出错了，最终发现是自己代码的问题！当找了一圈没有找到答案时，可能就要怀疑自己了，而不是怀疑软件出了问题！不过这也有好处，让我决定放弃使用 pycharm 转战 vs code</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs231n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装笔记</title>
      <link href="/archives/53e3a160.html"/>
      <url>/archives/53e3a160.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装Linux笔记"><a href="#安装Linux笔记" class="headerlink" title="安装Linux笔记"></a>安装Linux笔记</h1><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ol><li><p>如何安装双系统：移步 bilibili（建议安装最新版，美观且体验更友好）</p></li><li><p>设置root密码。然后创建新用户，并设置新用户密码以及 sudo 权限。</p></li><li><p>修改 /etc/hostname，reboot 后永久更改主机名</p></li><li><p>可能出现启动windows的时候有bitlocker，禁用bitlocker安全协议</p></li><li><p>配置代理clash，从youtube上视频学的（迷途小书童），要点就是将已经配置好的config.yml和Country.mmdb文件移动到./.config/clash文件夹下面，重新命名 config.yml 为 config.yaml，通过 clash dashboard 切换节点 <a href="http://clash.razord.top/">http://clash.razord.top/</a></p><p>让Terminal走代理的方法(desktop上的settings中设定会改写terminal端，使用export改写则不会影响desktop)，参考 <a href="https://zhuanlan.zhihu.com/p/46973701">知乎链接</a></p></li><li><p>官网下载git anaconda chrome typora chrome baiduyun vscode软件并安装</p><p>conda install, pip install 下载速度慢时，请使用国内镜像源，例如：</p><ol><li><p><a href="https://mirrors.bfsu.edu.cn/help/anaconda/">北京外国语大学镜像源</a>（推荐，截至2021/6/15下载速度很快）</p></li><li><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/">清华镜像源</a></p></li></ol></li><li><p>配置nvidia driver: 根据 <a href="https://zhuanlan.zhihu.com/p/59618999">知乎链接</a> ，在命令行里下载推荐的driver。如果在配置nvidia driver的过程中出现连接不上显卡，可能需要关闭 security boot。根据 <a href="https://zhuanlan.zhihu.com/p/108930996">知乎链接</a> 下载安装CUDA，选择runfile。</p><p>参考 <a href="https://zhuanlan.zhihu.com/p/336429888">稚晖君</a> 的教程，如果想移除所有cuda, cudnn, nvidia driver</p><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL">sudo apt-get remove --purge nvidia*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>教程里还教了如何更新apt source为阿里云镜像，里面的软件会更新而且下载更快。同时也设置了 sudo，让每一次 sudo 都不需要输入密码</p></li><li><p>pip install 遇到问题 enter your password to unlock your login keyring</p><p>解决方法，直接cancel，或者在passwd and key中更改密码</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 教程</title>
      <link href="/archives/2121b11b.html"/>
      <url>/archives/2121b11b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-reorganiszed-note"><a href="#Git-reorganiszed-note" class="headerlink" title="Git reorganiszed note"></a>Git reorganiszed note</h1><p>重新整理了 git 的常用操作命令，能够覆盖大部分版本管理场景，适合作为提纲进行复习</p><p>整理来自：<a href="https://www.bilibili.com/video/BV1FE411P7B3?from=search&amp;seid=1905221215711628694">bilibili</a> <a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰教程</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当遇到国外资源下载很慢的时候，可以考虑使用镜像资源</p><p>视频里使用了淘宝镜像安装 windows 版本 <a href="https://npm.taobao.org/mirrors/">https://npm.taobao.org/mirrors/</a></p><p>ubuntu 直接使用 apt install git 使用阿里云镜像</p><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><p>首先要理解的是，在windows 中 git bash 的基本操作命令和 Linux  terminal 是一样的。在 Linux 中 git 是集成到 terminal 当中的</p><h3 id="git-config"><a href="#git-config" class="headerlink" title="git  config"></a>git  config</h3><p>配置用户名和邮箱</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> config --global user.name <span class="token string">'your_name'</span><span class="token function">git</span> config --global user.email <span class="token string">'***@qq.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后的所有提交都会使用你的用户和邮箱</p><p>还可以根据需求配置代理</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 设置代理</span><span class="token function">git</span> config --global http.proxy http://127.0.0.1:1080<span class="token comment"># 查看代理</span><span class="token function">git</span> config --global --get http.proxy<span class="token comment"># 取消代理</span><span class="token function">git</span> config --global --unset http.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Git-基本理论"><a href="#Git-基本理论" class="headerlink" title="Git 基本理论"></a>Git 基本理论</h2><p>直接上图，重点关注左侧命令</p><p><img src="/archives/2121b11b/image-20210628141830141.png" style="zoom:80%;"></p><p>从工作区 -&gt; 暂存区：git add</p><p>从暂存区 -&gt; 本地仓库：git commit</p><p>从本地仓库 -&gt; 远程仓库：git push</p><p>这三个命令就能够让你感受到 git 版本控制的基本流程</p><h2 id="Git-仓库搭建"><a href="#Git-仓库搭建" class="headerlink" title="Git 仓库搭建"></a>Git 仓库搭建</h2><h3 id="git-init-amp-git-clone"><a href="#git-init-amp-git-clone" class="headerlink" title="git init &amp; git clone"></a>git init &amp; git clone</h3><p>生成仓库(master 分支)的两种方法</p><ol><li><p>git init 初始化，生成 .git 文件</p></li><li><p>git clone url 克隆远程仓库</p></li></ol><p>删除仓库则只需要删除 .git 文件夹即可</p><h2 id="Git-文件基本操作"><a href="#Git-文件基本操作" class="headerlink" title="Git 文件基本操作"></a>Git 文件基本操作</h2><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>git status 查看 git 文件状态，git status file_name 可指定文件</p><p>文件的几种状态：</p><ol><li>untracked 文件在文件夹中，从没有 add 过</li><li>unmodify 文件已经 commit 且库中最新版本和当前文件是一致的，可以通过 git rm 将其移出版本库管理</li><li>modified 文件在 commit 或者 add 过后有过修改，可以使用 git checkout 丢弃修改</li><li>staged (文件在之前 commit 过后有过修改) 经过 add，没有 commit</li></ol><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>有些时候我们不想把某些文件纳入版本控制中，可在主目录下建立 .gitignore 文件，例如你不详把 txt 类型文件进行版本控制，则在 .gitignore 文件中写入 *.txt 即可，其他具体规则不作介绍，也比较简单。</p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p>git add file_name 将文件加入暂存区，文件成为 staged 状态</p><p>git add . 将当前文件夹 add，比较方便快捷</p><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>git commit -m ‘massage you want to say’ 将暂存区所有文件加入到版本库中，并留下此次提交的 message</p><h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><p>将已经 commit 的文件从版本库中移除变为 untracked 文件</p><p>git rm —cached file_name</p><h2 id="Git-版本回退"><a href="#Git-版本回退" class="headerlink" title="Git 版本回退"></a>Git 版本回退</h2><h3 id="git-log-amp-git-reflog"><a href="#git-log-amp-git-reflog" class="headerlink" title="git log &amp; git reflog"></a>git log &amp; git reflog</h3><p>git log 查看 commit 历史记录，id，作者等信息</p><p>git reflog 查看所有的操作</p><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p>回退到某一个 commit 版本，id 只用写前几位，git 自动识别</p><p>git reset —hard commit_id</p><p>回退到上一个 commit 版本，如果回退两个则是 HEAD^^</p><p>git reset —hard HEAD^</p><p>—hard 参数其实代表回退到某个 commit 后，该 commit 之后的记录都会被丢弃。但 git 永远都有后悔药吃，如果回退到以前的版本想要再回来，使用 git reflog 查看所有命令</p><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><p>git checkout 能够让文件回到最近一次 add 或者 commit 时的状态</p><p>git checkout file_name</p><h2 id="分支与冲突"><a href="#分支与冲突" class="headerlink" title="分支与冲突"></a>分支与冲突</h2><h3 id="git-brach"><a href="#git-brach" class="headerlink" title="git brach"></a>git brach</h3><p>从这里我们可以更加深入理解 git 的工作形象，working tree</p><p>除了 master 分支，我们还可以创建其他分支，HEAD 所指的就是 working tree “生长”的地方，然后我们将分支合并，也即让 master “赶上来”，再删除 dev 分支。git 分支还有一个一般规则是，master 分支永远是最稳定的分支，开发都在 dev 或其他分支上进行</p><p><img src="/archives/2121b11b/branch_1.png" style="zoom: 50%;"></p><p><img src="/archives/2121b11b/branch_2.png" style="zoom: 50%;"></p><p><img src="/archives/2121b11b/branch_3.png" style="zoom:50%;"></p><p>使用 git branch 查看分支情况，也可用于删除分支</p><p>git branch -d branch_name</p><h3 id="git-switch"><a href="#git-switch" class="headerlink" title="git switch"></a>git switch</h3><p>使用 git swich 来创建和切换分支</p><p>git switch -c branch_name</p><p># 复制远程的分支到本地</p><p>git switch -c branch_name origin/branch_name</p><p>git switch branch_name</p><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><p>将某个分支合并到当前分支</p><p>git merge branch_name</p><p>如果发生了冲突：两个 branch 中在同一个文件中有不同的修改而无法合并，那么需要解决冲突。（判断文件是否有修改，是根据 commit id 之类的标记节点来判断的，但是否存在冲突则是根据文件的内容）</p><p><img src="/archives/2121b11b/branch_4.png" style="zoom:50%;"></p><p>先使用 git status 查看哪个文件发生冲突，然后使用 vim 编辑，git 会自动在文档中标明冲突的地方。怎样修改无所谓，只要你 add &amp; commit 过后，git 就会默认冲突解决，并将你的文件作为最新的版本加入版本库中，更新 working tree</p><p>如果对于 git 中 recursive 3-way merge 算法感兴趣，可以参看<a href="https://en.wikipedia.org/wiki/Merge_(version_control">维基百科</a></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="添加远程仓库-github-or-gitee"><a href="#添加远程仓库-github-or-gitee" class="headerlink" title="添加远程仓库 github or gitee"></a>添加远程仓库 github or gitee</h3><p>gitee 为国内网站，传输速度更快。通过以下步骤将本机与远程连接（以 github 为例）：</p><ol><li><p>注册 github 账号</p></li><li><p>生成 ssh 公钥</p><ol><li><p>在本机 user 目录下找到 ssh 文件夹（安装 git 过后这个文件夹会自动生成）</p></li><li><p>在 shell 中运行以下命令生成 ssh 密钥，其中 rsa 是一种加密算法 </p><p><code>ssh-keygen -t rsa</code></p><p>之后你就能在 .ssh 文件中找到 id_rsa 和 id_rsa.pub 文件</p></li></ol></li><li><p>添加 id_rsa.pub 到 github 账户设置中</p></li></ol><p>这样就把本机和远程仓库连接起来了，具体的说是将本机与你的 github 账号通过 ssh 连接起来了</p><h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>你的账号里可以有很多的仓库，我们想要将本地仓库与某一个指定仓库链接使用以下命令即可</p><p>git remote add origin [url]</p><p>远程仓库的名字叫 origin，这是 git 的默认叫法，url 是仓库的 https 或者 ssh</p><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p>把本地库的内容推送到远程仓库，使用下面命令</p><p>git push -u orgin master</p><p>这样就把本地 master 分支内容推送到了远程新的 master 分支。-u 参数为 set upstream 的意思，在推送的同时将我们的本地 master 分支和远程 master 分支联系起来（相当于作了 <code>git branch -u origin</code> ），今后则可以直接输入 git push 来简化推送命令，强烈建议在第一次 push 的时候带上 -u 参数</p><p>其他本地分支与远程分支的 push 和连接也是一样的，把上面命令的 master 改为对应分支的名字（例如：dev 分支）即可，前提是本地要切换到那个分支，且远程存在同名的分支。</p><p>个人认为 git push 一般是在同名的本地分支和远程分支之间进行</p><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p>文件冲突不仅出现在本地的 merge 当中，也存在在 push 操作当中。push 的本质也是将本地和远程这两个 branch 进行融合。当这个远程仓库只有你一个人在 push 时，是不会有冲突的，因为远程的 working tree 只会一直往前延伸；当有多个人都在对某一个文件进行修改，working tree 就相当于有了多个分支，在 push 的时候就会形成冲突。如果有远端的冲突形成，就需要使用 git pull</p><p>git pull 有两个作用，一个是拉取代码到本地，另一个是尝试与本地代码合并，如果不能使用 fast forward 合并，则需要自己来修改冲突部分，这部分和 git merge 是一样的</p><h2 id="Git-IDE"><a href="#Git-IDE" class="headerlink" title="Git + IDE"></a>Git + IDE</h2><p>现在 git 和很多 IDE 都有联动，可以直接在 IDE 中方便的操作 git！</p><p>以 pycharm 为例，只需要在你的项目文件夹下 git init 就可以 </p>]]></content>
      
      
      <categories>
          
          <category> 软件基础 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-theme-matery 教程</title>
      <link href="/archives/b129f5ae.html"/>
      <url>/archives/b129f5ae.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-matery-note"><a href="#hexo-theme-matery-note" class="headerlink" title="hexo-theme-matery note"></a>hexo-theme-matery note</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>参考原 github 项目进行整理：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><h3 id="config-yml-的修改建议"><a href="#config-yml-的修改建议" class="headerlink" title="_config.yml 的修改建议"></a>_config.yml 的修改建议</h3><p>在 hexo 根目录下的 _config.yml 文件中：</p><ol><li><p>切换 theme 为 hexo-theme-matery</p></li><li><p>url 改为网站 url (如：<a href="http://xxx.github.io">http://xxx.github.io</a>)</p></li><li><p>per_page 数值改为6及6的倍数，这样文章列表在各个屏幕下都能较好显示</p></li><li><p>插入图片（有点复杂，可以先跳过）。根据 <a href="https://zhuanlan.zhihu.com/p/265077468">知乎链接</a> 配置好 post_asset_folder，里面提到的 typora 技巧也很实用，建议采用。且一般来讲链接中提到的 hexo-renderer-marked 插件都是已经内置好的，不然你的博客不会渲染成功。</p><p>但是这个方法不能控制图片大小，而且配置过 typora 后还要再改图片的路径。我再下载了 hexo-asset-image 插件过后，直接用 typora 中的 html 方法 <code>&lt;img src='post_name/img.jpg'&gt;</code>引用图片，不需要二次更改路径</p></li></ol><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> hexo new page <span class="token string">'categories'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>categories 页是用来展示所有分类的页面</p><p>修改 <code>/source/categories/index.md</code> 文件的 front-matter (Front-matter 是文件最上方以 —- 分隔的区域，用于指定个别文件的变量)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">---title: categoriesdate: <span class="token number">2018</span>-09-30 <span class="token number">17</span>:25:30type: <span class="token string">"categories"</span>layout: <span class="token string">"categories"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于 page 和 post 的区别：两者其实很相似，你可以把 page 看作是特殊的 post，用来放置一些特殊内容：如分类、标签等等。</p><p>hexo 的分类是有等级关系的，我们以下面的 post front-matter 为例</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">title: 我的博客搭建笔记date: 2021-06-29 15:26:41tags:<span class="token list punctuation">-</span> hexo<span class="token list punctuation">-</span> 博客搭建categories:<span class="token list punctuation">-</span> 软件基础<span class="token list punctuation">-</span> hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件在分类时会被分配到所有提到的 categories 中，这些 categories 的路径是逐渐往下的 <code>/categories/软件基础/hexo/</code>，它们都有自己的 page 来收纳属于自己类别的文章。</p><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p>新建 page</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改对应 index.md</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">---title: tagsdate: <span class="token number">2018</span>-09-30 <span class="token number">18</span>:23:38type: <span class="token string">"tags"</span>layout: <span class="token string">"tags"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给 post 指定 tags 只需要在 front-matter 中写好就行了，如上面 categories 的例子。</p><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><h3 id="新建留言板-contact-页"><a href="#新建留言板-contact-页" class="headerlink" title="新建留言板 contact 页"></a>新建留言板 contact 页</h3><h3 id="新建友情链接-friends-页"><a href="#新建友情链接-friends-页" class="headerlink" title="新建友情链接 friends 页"></a>新建友情链接 friends 页</h3><p>新建方法都是和上面的方法一样的</p><h2 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h2><h3 id="名称、路径、图标"><a href="#名称、路径、图标" class="headerlink" title="名称、路径、图标"></a>名称、路径、图标</h3><p>配置菜单导航的名称、路径url、和图标icon，配置文件在 <code>themes/hexo-theme-matery/._config.yml</code></p><p>更改 menu 部分即可</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">menu:  <span class="token comment"># 把 Index 改为 Home</span>  Home:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可该的部分：</p><ol><li>名称可以是中文</li><li>图标可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中查找</li><li>还可以使用二级菜单。二级菜单在实现上可以理解为创建了一个软链接，到你指定的 page 上。</li></ol><p>由于我对于这个导航还是比较满意，就不作过多修改</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><p>由于代码看不明白，找到了一个比较详细的教程</p><p><a href="https://sunhwee.com/posts/6e8839eb.html">https://sunhwee.com/posts/6e8839eb.html</a></p><p>根据上面的链接修改了版权信息，增加了网站运行时间，访问人数的代码目前不需要修改</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code></p><p>以上的设置并不管用，没有高亮也没有行号</p><p>但是我下载了 hexo-prism-plugin 又卸载掉这个插件，就有高亮了，但依旧没有行号</p><p>考虑是 matery.css 文件中 pre 下 paddidng 不够大的问题，增加 padding 但依然没能解决</p><p>考虑是不是本身 prism 文件出了问题，重新到官网上下载了 prism.js 和 prism.css 替换原来系统中对应的文件，同时调整上面提到的 padding 参数，最后成功！</p><p>prism.js 文件位置在 <code>node_modules/prismjs</code></p><p>prism.css 文件位置在 <code>themes/hexo-theme-matery/source/libs/prism</code></p><p>现在想要去除隔离的那条竖线，尝试重复下面链接的操作，操作过后竖线没有去除，不过稍微调整了一下代码位置，也挺好看</p><p><a href="https://github.com/blinkfox/hexo-theme-matery/issues/103">https://github.com/blinkfox/hexo-theme-matery/issues/103</a></p><p>最终，我通过修改 prism.css 中 border-right 为 0px，去除了行号和代码之间的分隔线！</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.line-numbers .line-numbers-rows</span> <span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> -0.2em<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> -3.8em<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span> <span class="token comment">/* works for line-numbers below 1000 lines */</span><span class="token property">letter-spacing</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span><span class="token property">border-right</span><span class="token punctuation">:</span> 0px solid #999<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在解决标号和 code 没对齐的问题，修改 prism.css 文件中 <code>.line-numbers .line-numbers-rows</code> 下 top 参数为 -0.2em，微调成功！治好了强迫症！</p><h2 id="配置-theme-中的-config-yml"><a href="#配置-theme-中的-config-yml" class="headerlink" title="配置 theme 中的 _config.yml"></a>配置 theme 中的 _config.yml</h2><ol><li><p>根据配置文件中的注释，简单修改了下面的设置</p><p>dream, music, video, recommend, github &amp; social link, reward, clicklove, myProjects, mySkills, subtitle, banner</p></li><li><p>取消 rainbow 特效</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.bg-cover:after</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 hexo d 时遇到问题</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">err: Error: Spawn failed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二天自动好了，根本原因是网络没有走通的问题，之后可能再次遇到，到时候再解决，建议在 github 上搜索</p><p>现在发现了，由于我使用的是 root 用户下的 git 配置，而我 root 用户下 git config 没有设置好参数所以部署失败。我在 root 目录的 .gitconfig 和 .ssh 下配置好了 user.name ssh 等必要 git 配置就成功了。这说明了在 linux 下不同的用户都需要自己去配置 git</p></li><li><p>修改博客 feature image 只选用1张简单图来代表。原来有 24 张图，我把24个路径全部改为同1张图。</p></li><li><p>因为之后需要写入数学公式，将 mathjax 改为 true。但发现显示公式渲染不正常，而且小括号显示不出来。根据 <a href="https://github.com/blinkfox/hexo-theme-matery/issues/119">github issue</a> 解决无法换行问题，将渲染器换为 hexo-renderer-kramed 而且代码高亮插件似乎并没受到影响。根据 <a href="https://adaning.github.io/posts/33457.html">MathJax常见问题</a> 解决小括号无法显示问题。</p></li></ol><h2 id="配置-matery-css"><a href="#配置-matery-css" class="headerlink" title="配置 matery.css"></a>配置 matery.css</h2><p>为了进一步设置我们的网页，让其更具有个性化，就需要进一步调整 matery.css 文件。</p><ol><li><p>设置 导航颜色</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #BEBEBE 0%<span class="token punctuation">,</span> #708090 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查询颜色代码网址：<a href="https://tool.oschina.net/commons?type=3">https://tool.oschina.net/commons?type=3</a></p></li><li><p>由于刚开始加载时 banner 图片没有迅速加载，会默认先加载橙色，我改成灰色</p><p>修改“\Hexo\themes\hexo-theme-matery\layout\ _partial\index-cover.ejs”文件中的第63行即可。</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel-item red white-text bg-cover about-cover<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把“red”修改为其他颜色即可。我改为 slate gray</p></li><li><p>改变 progress-bar 颜色</p></li><li><p>改变回到顶部按钮颜色 top-scroll</p></li><li><p>改变封面打字效果的文字大小、颜色 .bg-cover .description</p></li><li><p>修改了打字效果的颜色过后，我发现文章标题的颜色也跟着改了。解决方法是在下面的 .bg-cover .description 增加属性 color: #color_code，这样就能分别调整它们的颜色。</p></li><li><p>修改 about 页面链接颜色 aboutme</p></li><li><p>修改 archive 页面时间线颜色 cd-timeline</p></li></ol><h2 id="插件优化"><a href="#插件优化" class="headerlink" title="插件优化"></a>插件优化</h2><h3 id="文章-url-优化"><a href="#文章-url-优化" class="headerlink" title="文章 url 优化"></a>文章 url 优化</h3><p>我没有使用项目中主要介绍的转拼音方法，那样生成的链接太长了，而是使用 hexo-abbrlink 插件</p><pre class="line-numbers language-sehll" data-language="sehll"><code class="language-sehll">npm install hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在根目录 _config.yml 文件中修改</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> archives/<span class="token punctuation">:</span>abbrlink.html<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>    <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc32   <span class="token comment">#算法： crc16(default) and crc32</span>    <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex     <span class="token comment">#进制： dec(default) and hex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 hexo 三连时遇到报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FATAL YAMLException: duplicated mapping key <span class="token punctuation">(</span><span class="token number">111</span>:1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明有原配置文件中已经有 permalink 的定义，我们需要把里本身的 permalink 代码注释掉，完美运行！现在我们的文章 url 最后是特殊的数字id <code>/archives/48732.html</code></p><h3 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h3><h3 id="添加-emoji-表情支持"><a href="#添加-emoji-表情支持" class="headerlink" title="添加 emoji 表情支持"></a>添加 emoji 表情支持</h3><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>上面三个部分都是按照 hexo-thme-matery github 项目配置的</p><h3 id="评论插件utterance"><a href="#评论插件utterance" class="headerlink" title="评论插件utterance"></a>评论插件utterance</h3><p>matery 在配置文件中告诉我们，有的评论软件有安全隐患，推荐使用 utterance</p><p>尝试 utterance，如果成功，则返回卸载 valine，注销 lean cloud</p><p>也尝试了 livere 安装也很不友好</p><p>成功在 contact 页面下展示了 utterance，方法是在 contact.ejs 文档下找了一个地方插入下面的代码（记得改为 r自己的 github repo，形式为 <owner>/<name> ），</name></owner></p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://utteranc.es/client.js<span class="token punctuation">"</span></span><span class="token attr-name">repo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[ENTER REPO HERE]<span class="token punctuation">"</span></span><span class="token attr-name">issue-term</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pathname<span class="token punctuation">"</span></span><span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-light<span class="token punctuation">"</span></span><span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token attr-name">async</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我插入在 <code>&lt;div class="card"&gt;</code> 后面，是管用的。因为原项目说，插入到你的 layout 需要出现的地方，我不懂前端的代码，只能胡乱插入了，管用就行！我猜测这是一个“卡片类”能够存放你的内容，以白色卡片在页面中展示出来。</p><p>用同样的方法在 post 下添加评论。找到 <code>/hexo-theme-matery/layout/_partial/post-detail.ejs</code> 文件，找到评论的布局之处（搜索主题自带的评论插件如 gittalk，就能找到）插入上面的代码即可。但是渲染过后背景是透明的，不太好看，我希望想 contact 一样有白色背景，那就复制一下 contact.ejs 中的“卡片类”评论区就行了。</p><h3 id="分类优化"><a href="#分类优化" class="headerlink" title="分类优化"></a>分类优化</h3><p>matery 主题的分类没有多层分类，在 categories 页面只有像 tag 一样标签，这样的分类又有什么用呢？根据 <a href="https://notes.zhangxiaocai.cn/posts/5a99eb4d.html#toc-heading-8">Hexo Matery 主题添加多级分类</a> 进行设置，可以得到更好的分类页，类别之间将有层次关系</p><p>具体来讲，采用了博客里最新更新的代码，给 category-item, category-count 等增加 color 属性，改为自己喜欢的颜色。给 category-title 增加 font-size 属性，修改标题大小</p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><h3 id="网站SEO优化"><a href="#网站SEO优化" class="headerlink" title="网站SEO优化"></a>网站SEO优化</h3><p>Search Engine Optimization</p><p>将自己的网站提交给搜索引擎</p><h3 id="不断更新"><a href="#不断更新" class="headerlink" title="不断更新"></a>不断更新</h3><p>持续更新博客内容，完善分类</p>]]></content>
      
      
      <categories>
          
          <category> 软件基础 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客搭建笔记</title>
      <link href="/archives/4984.html"/>
      <url>/archives/4984.html</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客搭建-hexo"><a href="#个人博客搭建-hexo" class="headerlink" title="个人博客搭建 hexo"></a>个人博客搭建 hexo</h1><p>整体参考过程为 CodeSheep 视频：<a href="https://www.bilibili.com/video/BV1Yb411a7ty">https://www.bilibili.com/video/BV1Yb411a7ty</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Node-js-amp-npm"><a href="#Node-js-amp-npm" class="headerlink" title="Node.js &amp; npm"></a>Node.js &amp; npm</h3><p>参考链接：<a href="https://developer.aliyun.com/article/760687">https://developer.aliyun.com/article/760687</a></p><p>我选择了 apt 安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nodejs <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>版本信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nodejs --versionv10.19.0<span class="token function">npm</span> --version<span class="token number">6.14</span>.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>版本还是有点老旧</p><h3 id="淘宝镜像-cnpm"><a href="#淘宝镜像-cnpm" class="headerlink" title="淘宝镜像 cnpm"></a>淘宝镜像 cnpm</h3><p>cnpm 的官方介绍是：cnpm是一个完整 npmjs.or 镜像，你可以用此代替官方版本(只读)，同步频率目前为 <strong>10分钟</strong> 一次以保证尽量与官方服务同步。</p><p>安装了 cnpm 就可以使用镜像资源下载包，如果不希望使用镜像资源则换回 npm 命令即可。使用如下命令安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> cnpm <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>版本信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo -vhexo-cli: <span class="token number">4.3</span>.0os: linux <span class="token number">5.4</span>.0-77-generic Ubuntu <span class="token number">20.04</span>.2 LTS <span class="token punctuation">(</span>Focal Fossa<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkdir</span> blog <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> blog<span class="token function">sudo</span> hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果哪里出错了，想重来，直接删除 blog 文件夹即可</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>遇到报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">INFO  Validating configINFO  Start processingFATAL <span class="token punctuation">{</span> err:   TypeError: line.matchAll is not a <span class="token keyword">function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>原因在于 nodejs 版本太低，尝试使用 n 升级 nodejs</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g n<span class="token function">sudo</span> n latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看版本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">node -vv16.4.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成功启动 hexo server，你可以通过 <a href="http://localhost:4000">http://localhost:4000</a> 访问你的本地博客啦！</p><h3 id="写第一篇文章"><a href="#写第一篇文章" class="headerlink" title="写第一篇文章"></a>写第一篇文章</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> hexo new <span class="token string">'Fisrt Blog'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">INFO  Validating configINFO  Created: /home/declan/Documents/blog/source/_posts/First-Blog.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你的文章位置在上面的路径中可以找到，可以通过 markdown 语法进行书写</p><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><p>清理一些缓存，然后生成我们的页面，同样使用 hexo server 从本地查看效果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo cleanhexo generatehexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="布属到远端"><a href="#布属到远端" class="headerlink" title="布属到远端"></a>布属到远端</h2><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p>在 github 新建仓库 name.github.io name一定要是你的 github 用户名</p><p>在 blog 目录下，下载 git deployer</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> cnpm <span class="token function">install</span> --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置-config-yml"><a href="#设置-config-yml" class="headerlink" title="设置 _config.yml"></a>设置 _config.yml</h3><p>在 blog 目录下打开 _config.yml 文件，在文件最后的 # Deployments 上修改</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span>deploy:  type: <span class="token string">'git'</span>  repo: https://github.com/DeclK/declk.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在你的仓库里多了一些文件</p><p>以后你就可以通过你的仓库名 <em>*</em>.github.io 来访问你的博客啦！</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>在寻找了许久过后决定使用 <a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件基础 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
